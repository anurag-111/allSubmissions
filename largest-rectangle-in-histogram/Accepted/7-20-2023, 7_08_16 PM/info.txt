{"id":999363655,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689860296,"status":10,"status_display":"Accepted","runtime":"225 ms","url":"/submissions/detail/999363655/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"76.1 MB","code":"// Brute Force Approach :\n\nclass Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        int n = heights.size();\n        int leftBoundary[n];\n        int rightBoundary[n];\n        stack<int> st;\n\n        for(int i = 0; i < n; i++) {\n            \n            while(!st.empty() && heights[st.top()] >= heights[i]) {\n                // We compare the height of the current bar (heights[i]) with the height \n                // of the bar at the top of the stack (heights[st.top()]). We want to find \n                // the leftmost boundary of the current bar, and for that, we need to find the \n                // index of the first bar with a smaller height on its left side. Therefore, \n                // we pop elements from the stack until the stack becomes empty or the height \n                // of the bar at the top of the stack is strictly less than the height of the current bar.\n                st.pop();\n            }\n\n            \n            if(st.empty()) {\n                // If the stack is empty after the above while loop, it means there is no bar with \n                // a smaller height than the current bar on its left side.\n                leftBoundary[i] = 0;\n            } else {\n                // If the stack is not empty after the while loop, it means there is a bar with \n                // a smaller height than the current bar on its left side. In this case, we take \n                // the top element of the stack, which is the index of the bar with the smaller \n                // height, and add 1 to it to get the left boundary of the current bar.\n                leftBoundary[i] = st.top() + 1;\n            }\n\n            // Finally, we push the current index (i) onto the stack to keep track of the bar's \n            // index for the next iterations.\n            st.push(i);\n        }\n\n        // Clearing the stack to be re-used\n        while(!st.empty()) {\n            st.pop();\n        }\n\n\n        // Iterate through each bar's height in the 'heights' array.\n        for (int i = n - 1; i >= 0; i--) {\n            // While the stack is not empty and the height of the current bar (at index 'i')\n            // is less than or equal to the height of the bar at the top of the stack,\n            // keep popping elements from the stack.\n\n            while (!st.empty() && heights[st.top()] >= heights[i]) {\n                st.pop();\n            }\n\n            // Now, the stack is either empty or contains the index of the bar with smaller height\n            // than the current bar on its right side.\n\n            // If the stack is empty, it means there is no bar with smaller height on the right side.\n            // Therefore, the right boundary of the current bar (at index 'i') is considered to be the end of the histogram.\n            if (st.empty()) {\n                rightBoundary[i] = n - 1;\n            } else {\n                // If the stack is not empty, there is a bar with smaller height on the right side.\n                // The right boundary of the current bar (at index 'i') is the index of that smaller height bar - 1.\n                rightBoundary[i] = st.top() - 1;\n            }\n\n            // Push the current index ('i') onto the stack to keep track of the bar's index for the next iterations.\n            st.push(i);\n        }\n\n        int maxArea = INT_MIN;\n\n        for(int i = 0; i < heights.size(); i++) {\n            maxArea = max(maxArea, (heights[i] * (rightBoundary[i] - leftBoundary[i] + 1)));\n        }\n\n        return maxArea;\n    }\n};\n\n// ANALYSIS :\n// Time Complexity  :- O(N^2)\n// Space Complexity :- O(N)\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}