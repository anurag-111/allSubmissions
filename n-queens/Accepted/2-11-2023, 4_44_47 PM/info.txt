{"id":895871255,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1676114087,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/895871255/","is_pending":"Not Pending","title":"N-Queens","memory":"42.3 MB","code":"// https://leetcode.com/problems/n-queens\n\nclass Solution {\n    public List<List<String>> solveNQueens(int n) {\n        \n        char[][] board = new char[n][n];\n        \n        for (int i = 0; i < n; i++) {\n            Arrays.fill(board[i], '.');\n        }\n        List<List<String>> result = new ArrayList<>();\n        solve(0, n, board, result);\n        return result;\n    }\n    \n    private void solve(int row, int n, char[][] board, List<List<String>> result) {\n        if (row == n) {\n            constructResult(board, result);\n            return;\n        }\n        \n        for (int col = 0; col < n; col++) {\n            \n            if (isValid(row, col, n, board)) {\n                board[row][col] = 'Q';\n                solve(row + 1, n, board, result);\n                board[row][col] = '.';\n            }\n        }\n    }\n    \n    private boolean isValid(int row, int col, int n, char[][] board) {\n        \n        // 1. we always place queen in a new row, so need not check for attacking queens in other rows\n        \n        // 2. Check if there are other attacking queens in the column = col\n        for (int i = 0; i < row; i++) {\n            if (board[i][col] == 'Q') {\n                return false;\n            }\n        }\n        \n        // 3. check if the diag from left to right has attacking queens. \n        // Need to check only for the diagonals above, as the remaining rows have not yet been filled.\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            \n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        \n        // 4. Similarly, check for diagonal from right to left\n        \n        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    private void constructResult(char[][] board, List<List<String>> result) {\n        \n        List<String> chess = new ArrayList<>();\n        for (int i = 0; i < board.length; i++) {\n            chess.add(String.valueOf(board[i]));\n        }\n        result.add(chess);\n    }\n}","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}