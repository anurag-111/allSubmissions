{"id":908868280,"lang":"cpp","lang_name":"C++","time":"6 months, 2 weeks","timestamp":1677936353,"status":10,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/908868280/","is_pending":"Not Pending","title":"Count Subarrays With Fixed Bounds","memory":"70.4 MB","code":"class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int minK, int maxK) {\n        \n        int n = nums.size();\n        int leftBound = -1;\n        int lastMin = -1, lastMax = -1;\n        long long count = 0;\n        \n        for (int i = 0; i < n; i++) {\n\n            // check if nums[i] is within the range [minK, maxK]\n            if (nums[i] >= minK && nums[i] <= maxK) {\n\n                // if nums[i] is equal to minK, update lastMin to the current index i\n                if(nums[i] == minK) {\n                    lastMin = i;\n                }\n\n                // if nums[i] is equal to maxK, update lastMax to the current index i\n                if(nums[i] == maxK) {\n                    lastMax = i;\n                }\n\n                // update the count by the number of valid subarrays between leftBound and the \n                // smaller of lastMin and lastMax\n                count = count + max(0, min(lastMin, lastMax) - leftBound);\n            } else {\n\n                // if nums[i] is not within the range [minK, maxK], update leftBound to i\n                leftBound = i;\n                \n                // reset lastMin and lastMax to -1\n                lastMin = -1;\n                lastMax = -1;\n            }\n        }\n        \n        // return the final count of valid subarrays\n        return count;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"count-subarrays-with-fixed-bounds","has_notes":false,"flag_type":1}