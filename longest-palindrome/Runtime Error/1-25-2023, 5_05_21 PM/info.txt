{"id":884973067,"lang":"java","lang_name":"Java","time":"7 months, 4 weeks","timestamp":1674646521,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/884973067/","is_pending":"Not Pending","title":"Longest Palindrome","memory":"N/A","code":"class Solution {\n    public int longestPalindrome(String s) {\n        int lowerCase[] = new int[26];\n        int upperCase[] = new int[26];\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c - 97 >= 0) {\n                lowerCase[c - 97]++;\n            } else {\n                upperCase[c - 97]++;\n            }\n        }\n\n        int ans = 0;\n        boolean isFirstOdd = false;\n        for (int i = 0; i < 26; i++) {\n            if (lowerCase[i] % 2 == 0) {\n                ans += lowerCase[i];\n            } else {\n                if (isFirstOdd == false) {\n                    ans += lowerCase[i];\n                    isFirstOdd = true;\n                } else {\n                    ans += lowerCase[i] - 1; //frequency gets reduced\n                }\n            }\n        }\n        for (int i = 0; i < 26; i++) {\n            if (upperCase[i] % 2 == 0) {\n                ans += upperCase[i];\n            } else {\n                if (isFirstOdd == false) {\n                    ans += upperCase[i];\n                    isFirstOdd = true;\n                } else {\n                    ans += upperCase[i] - 1; //frequency gets reduced\n                }\n            }\n        }\n        return ans;\n    }\n}\n\n//instead of usig hashmaps here we have used two arrays\n// TC : O(n), n being the number of characters in a string.\n// SC : O(26 + 26) , basically constant time.","compare_result":"11111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-palindrome","has_notes":false,"flag_type":1}