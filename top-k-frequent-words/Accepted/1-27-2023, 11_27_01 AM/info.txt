{"id":886096188,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1674799021,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/886096188/","is_pending":"Not Pending","title":"Top K Frequent Words","memory":"45.7 MB","code":"class Solution {\n    public List<String> topKFrequent(String[] words, int k) {\n        \n        if (words == null) {\n            return null;\n        }\n        \n        Map<String, Integer> counts = new HashMap<>();\n        \n        for (String word : words) {\n            counts.put(word, counts.getOrDefault(word, 0) + 1);\n        }\n        \n        PriorityQueue<String> minHeap = new PriorityQueue<>((a, b) -> counts.get(a) != counts.get(b) ? counts.get(a) - counts.get(b) : b.compareTo(a));\n        \n        for (String word : counts.keySet()) {\n            minHeap.add(word);\n            \n            if (minHeap.size() > k) {\n                minHeap.remove();\n            }\n        }\n        \n        List<String> result = new ArrayList<>();\n        \n        while (!minHeap.isEmpty()) {\n            result.add(minHeap.remove());\n        }\n        \n        Collections.reverse(result);\n        return result;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"top-k-frequent-words","has_notes":false,"flag_type":1}