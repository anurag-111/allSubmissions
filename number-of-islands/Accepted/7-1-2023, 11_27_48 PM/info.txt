{"id":983931071,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1688234268,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/983931071/","is_pending":"Not Pending","title":"Number of Islands","memory":"12.2 MB","code":"#include <vector>\n\nclass Solution {\nprivate:\n    // Depth-first search function to mark islands as visited\n    void dfs(vector<vector<char>>& grid, int i, int j) {\n        // Base cases for recursion\n        if (i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size() || grid[i][j] == '0') {\n            return;\n        }\n\n        // Mark the current cell as visited by changing its value to '0'\n        grid[i][j] = '0';\n\n        // Perform DFS in all four directions\n        dfs(grid, i + 1, j);\n        dfs(grid, i, j + 1);\n        dfs(grid, i - 1, j);\n        dfs(grid, i, j - 1);\n    }\n\npublic:\n    // Function to calculate the number of islands in the grid\n    int numIslands(vector<vector<char>>& grid) {\n        int count = 0; // Variable to store the count of islands\n\n        // Iterate through each cell in the grid\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[0].size(); j++) {\n                // If an unvisited island is found, perform DFS and increment the count\n                if (grid[i][j] == '1') {\n                    dfs(grid, i, j);\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}