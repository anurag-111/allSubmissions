{"id":920688839,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1679573107,"status":10,"status_display":"Accepted","runtime":"174 ms","url":"/submissions/detail/920688839/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"60.1 MB","code":"class Solution {\nprivate:\n    void dfs(vector<int> &visited, unordered_map<int, vector<int>> &adj_list, int curr) {\n        visited[curr] = 1;\n\n        for(auto i : adj_list[curr]) {\n            if(visited[i] == -1) {\n                dfs(visited, adj_list, i);\n            }\n        }\n    }\npublic:\n    int makeConnected(int n, vector<vector<int>>& connections) {\n        vector<int> visited(n, -1);\n        unordered_map<int, vector<int>> adj_list;\n\n        // Creation of adjacency list\n        int edges = 0;\n        for(int i = 0; i < connections.size(); i++) {\n            adj_list[connections[i][0]].push_back(connections[i][1]);\n            adj_list[connections[i][1]].push_back(connections[i][0]);\n            edges++;\n        }\n\n        // Number of components\n        int comp = 0;\n        for(int i = 0; i < n; i++) {\n            if(visited[i] == -1) {\n                comp++;\n                dfs(visited, adj_list, i);\n            }\n        }\n\n        // Check for valid number of edges\n        if(edges < n - 1) {\n            return -1;\n        } else {\n            return comp - 1;\n        }\n\n        return -1;\n\n    }\n};\n\n// Time Complexity : DFS -> O(V + E)","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected","has_notes":false,"flag_type":1}