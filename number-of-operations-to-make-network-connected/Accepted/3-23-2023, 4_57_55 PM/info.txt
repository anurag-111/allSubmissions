{"id":920674840,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1679570875,"status":10,"status_display":"Accepted","runtime":"179 ms","url":"/submissions/detail/920674840/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"59.8 MB","code":"class Solution {\n    void DFS(unordered_map<int,vector<int>>& adj,int curr,vector<bool>& visited)\n    {\n        visited[curr] = true;\n        for(auto i: adj[curr])\n            if(visited[i]==false)\n                DFS(adj,i,visited);\n    }\npublic:\n    int makeConnected(int n, vector<vector<int>>& connections) {\n        vector<bool> visited(n,false);\n        unordered_map<int,vector<int>> adj;\n        //STEP-1: Make adjacency list\n        int edges = 0;\n        for(int i=0;i<connections.size();++i)\n        {\n            adj[connections[i][0]].push_back(connections[i][1]);\n            adj[connections[i][1]].push_back(connections[i][0]);\n            edges += 1;\n        }\n        \n        //STEP-2: Find No of components\n        int components = 0;\n        for(int i=0;i<n;++i)\n            if(visited[i]==false)\n            {\n                components +=1;\n                DFS(adj,i,visited);\n            }\n        \n        //STEP-3: Count no of edges\n        if(edges < n-1) //If no of edges are less than that in MST\n            return -1;\n            else \n            return components - 1;\n        // int redundant = edges-((n-1)-(components-1));   //Count redundant edges\n        // if(redundant >= (components-1)) //Check if we can join components using redundant edges\n        //     return components-1;\n        return -1;\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected","has_notes":false,"flag_type":1}