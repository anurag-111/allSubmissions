{"id":959975597,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1685418258,"status":10,"status_display":"Accepted","runtime":"131 ms","url":"/submissions/detail/959975597/","is_pending":"Not Pending","title":"Design an Ordered Stream","memory":"83.7 MB","code":"class OrderedStream {\nprivate:\n    vector<string> data;    // Stores the input stream\n    int currentIndex;       // Index to keep track of the current position\n    \npublic:\n    OrderedStream(int n) {\n        data.resize(n);     // Resize the vector when OrderedStream is called\n        currentIndex = 0;   // Initialize currentIndex to 0\n    }\n    \n    vector<string> insert(int id, string value) {\n        vector<string> result;\n        data[id - 1] = value;   // Store the value in the corresponding index position\n\n        // Check if the current index and the stream value are not empty\n        while (currentIndex < data.size() && data[currentIndex] != \"\") {\n            result.push_back(data[currentIndex]);   // Add the value to the result vector\n            currentIndex++;                         // Move to the next index\n        }\n\n        return result;\n    }\n};\n\n/**\n * Your OrderedStream object will be instantiated and called as such:\n * OrderedStream* obj = new OrderedStream(n);\n * vector<string> param_1 = obj->insert(id, value);\n */\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-an-ordered-stream","has_notes":false,"flag_type":1}