{"id":867509068,"lang":"cpp","lang_name":"C++","time":"8 months, 3 weeks","timestamp":1672319739,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/867509068/","is_pending":"Not Pending","title":"Trapping Rain Water","memory":"19.9 MB","code":"// The problem can be solved using a single traversal, essentially reducing the time complexity to O(N).\n\n// The idea is to consider two arrays left_max[] and right_max[], where left_max[i] will store the maximum height on the left until index i. Similarly,  right_max[i] will store the maximum height on the right until index i.\n\n// Time Complexity: O(N) + O(N) + O(N) = O(N), since the array is traversed thrice.\n// Space Complexity: O(N), since two arrays are needed.\n\n\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n        int result = 0;\n        int size = height.size();\n        int left_max[size], right_max[size];\n        int max_value = 0;\n        \n        for(int i = 0;i < size; i++) {\n            max_value = max (max_value, height[i]);\n            left_max[i] = max_value;\n        }\n        \n        max_value = 0;\n        for(int i = size - 1; i >= 0; i--) {\n            max_value = max (max_value, height[i]);\n            right_max[i] = max_value;\n        }\n        \n        for (int i = 0; i < size; i++) {\n            result += min(left_max[i], right_max[i]) - height[i];\n        }\n        return result;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trapping-rain-water","has_notes":false,"flag_type":1}