{"id":895171322,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1676010836,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/895171322/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"6.6 MB","code":"class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        if (!digits.size()) {\n            return {};\n        }\n        unordered_map <char, string> umap = {\n            {'2', \"abc\"},\n            {'3', \"def\"},\n            {'4', \"ghi\"},\n            {'5', \"jkl\"},\n            {'6', \"mno\"},\n            {'7', \"pqrs\"},\n            {'8', \"tuv\"},\n            {'9', \"wxyz\"}\n        };\n\n        string current = \"\";\n        vector<string> result;\n\n        dfs(digits, 0, umap, current, result);\n        return result;\n    }\nprivate: \n    void dfs(string digits, int index, unordered_map <char, string>& umap, string& current, vector<string>& result) {\n        if (index == digits.size()) {\n            result.push_back(current);\n            return;\n        }\n\n        string str = umap[digits[index]];\n        for(int i = 0; i < str.size(); i++) {\n            current.push_back(str[i]);\n            dfs(digits, index + 1, umap, current, result);\n            current.pop_back();\n        }\n    }\n};\n\n\n/*\n    Approach : \n\n    Hash map all digits to letters, add 1 letter at a time for each digit, \n    then backtrack to generate all possible combinations.\n\n    Complexity : \n    \n    Time: O(4^N * N), where N <= 4 is length of digits string. \n    Here, 4 is chosen assuming the worst case where each digit will be 7 or 9.\n    \n    Space (without counting output): O(N), it's the depth of stack memory.\n\n*/\n","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}