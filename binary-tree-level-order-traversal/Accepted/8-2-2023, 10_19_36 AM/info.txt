{"id":1009953378,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1690951776,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1009953378/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"13.6 MB","code":"// Definition for a binary tree node (assuming it's already defined somewhere else)\n// struct TreeNode {\n//     int val;\n//     TreeNode* left;\n//     TreeNode* right;\n//     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n// };\n\nclass Solution {\npublic:\n    // Function to perform level-order traversal of a binary tree\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        // Initialize a 2D vector to store the result\n        vector<vector<int>> result;\n        \n        // Base case: If the tree is empty, return the empty result vector\n        if (!root) {\n            return result;\n        }\n\n        // Create a queue to hold the nodes of the current level\n        queue<TreeNode*> q;\n        q.push(root);\n        \n        while (!q.empty()) {\n            // Get the number of nodes in the current level\n            int size = q.size();\n            \n            // Create a vector to store the nodes' values in the current level\n            vector<int> currentLevel;\n            \n            // Process all the nodes in the current level\n            for (int i = 0; i < size; i++) {\n                // Get the front node from the queue\n                TreeNode* node = q.front();\n                q.pop();\n                \n                // Add the node's value to the current level vector\n                currentLevel.push_back(node->val);\n                \n                // Enqueue the left and right children of the current node if they exist\n                if (node->left) {\n                    q.push(node->left);\n                }\n                if (node->right) {\n                    q.push(node->right);\n                }\n            }\n            \n            // Add the current level vector to the result\n            result.push_back(currentLevel);\n        }\n        \n        // Return the final result containing the level-order traversal\n        return result;\n    }\n};\n","compare_result":"11111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}