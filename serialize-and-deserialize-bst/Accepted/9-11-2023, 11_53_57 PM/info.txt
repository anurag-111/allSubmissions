{"id":1046780783,"lang":"cpp","lang_name":"C++","time":"1 week, 2 days","timestamp":1694456637,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1046780783/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"36.7 MB","code":"class Codec {\npublic:\n    // Serialize the binary tree to a string in Preorder traversal\n    string serialize(TreeNode* root) {\n        if (root == nullptr) {\n            return \"null\"; // Represent null nodes as \"null\"\n        }\n        \n        string left = serialize(root->left);   // Serialize the left subtree\n        string right = serialize(root->right); // Serialize the right subtree\n        \n        return to_string(root->val) + \",\" + left + \",\" + right;\n    }\n    \n    // Deserialize the binary tree from a serialized string\n    TreeNode* deserialize(string data) {\n        istringstream iss(data);\n        return deserializeHelper(iss);\n    }\n    \n    // Deserialize helper function\n    TreeNode* deserializeHelper(istringstream& iss) {\n        string val;\n        getline(iss, val, ','); // Read the next value\n        \n        if (val == \"null\") {\n            return nullptr; // Return nullptr for \"null\" nodes\n        }\n        \n        TreeNode* root = new TreeNode(stoi(val)); // Create a new node with the value\n        \n        root->left = deserializeHelper(iss);  // Deserialize the left subtree\n        root->right = deserializeHelper(iss); // Deserialize the right subtree\n        \n        return root;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-bst","has_notes":false,"flag_type":1}