{"id":1009885838,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1690944427,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1009885838/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"8.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nclass Solution {\nprivate:\n    // Helper function for performing inorder traversal of the tree\n    void inorderTraversalHelper(TreeNode* root, vector<int>& nodes) {\n        // Base case: If the current node is NULL, return\n        if (root == NULL) {\n            return;\n        }\n        \n        // Recursive call to traverse the left subtree\n        inorderTraversalHelper(root->left, nodes);\n        \n        // Add the current node's value to the list\n        nodes.push_back(root->val);\n        \n        // Recursive call to traverse the right subtree\n        inorderTraversalHelper(root->right, nodes);\n    }\n    \npublic:\n    // Function to return a vector containing the values of nodes in inorder traversal\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> nodes;\n        \n        // Call the helper function to perform inorder traversal\n        inorderTraversalHelper(root, nodes);\n        \n        return nodes;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}