{"id":1007737478,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1690724579,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1007737478/","is_pending":"Not Pending","title":"Compare Version Numbers","memory":"6.2 MB","code":"/* \n\nObjective\n---------\n\nThe goal of the code is to compare two version strings version1 and version2, and return:\n-1 if version1 is smaller than version2.\n 1 if version1 is larger than version2.\n 0 if they are equal.\n \nExplanation\n-----------\n \n Input: version1 = \"1.2.3\", version2 = \"1.2.3.0\"\n\n    1. splitVersions(\"1.2.3\")   -> Returns {1, 2, 3}\n       splitVersions(\"1.2.3.0\") -> Returns {1, 2, 3, 0}\n\n    2. Compare {1, 2, 3} and {1, 2, 3, 0}:\n       - num1 = 1, num2 = 1 -> Equal, continue to the next component\n       - num1 = 2, num2 = 2 -> Equal, continue to the next component\n       - num1 = 3, num2 = 3 -> Equal, continue to the next component\n       - num1 = 0, num2 = 0 -> Both are 0, continue to the next component\n\n    3. We have compared all components of both versions and found them equal.\n       Return 0.\n\n Output: 0 (As both versions are equal)\n\n*/\n\n\nclass Solution {\nprivate:\n    // Helper function to split version string and convert to integers\n    vector<int> splitVersionString(string version) {\n        vector<int> components;\n        stringstream ss(version);\n        string token;\n\n        // Split the version string by '.'\n        while (getline(ss, token, '.')) {\n            components.push_back(stoi(token));\n        }\n\n        return components;\n    }\n\npublic:\n    int compareVersion(string version1, string version2) {\n        // Split version strings into individual components\n        vector<int> v1 = splitVersionString(version1);\n        vector<int> v2 = splitVersionString(version2);\n\n        // Find the maximum number of components in either version\n        int maxLength = max(v1.size(), v2.size());\n\n        // Compare the version components\n        for (int i = 0; i < maxLength; i++) {\n            int component1 = (i < v1.size()) ? v1[i] : 0; // Get current component of version1\n            int component2 = (i < v2.size()) ? v2[i] : 0; // Get current component of version2\n\n            if (component1 > component2) {\n                return 1; // version1 is greater\n            } else if (component1 < component2) {\n                return -1; // version2 is greater\n            }\n            // If component1 and component2 are equal, move on to the next component\n        }\n\n        return 0; // Both versions are equal\n    }\n};\n\n\n// Time Complexity: O(max(m, n)) + O(maxLength)\n// Space Complexity: O(max(m, n))","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"compare-version-numbers","has_notes":false,"flag_type":1}