{"id":923570166,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1680001961,"status":10,"status_display":"Accepted","runtime":"278 ms","url":"/submissions/detail/923570166/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"144.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    public:\n    int minDepth(TreeNode* root) {\n        if (root == NULL) {\n            return 0;\n        } \n        queue<TreeNode*> Q;\n        Q.push(root);\n\n        int i = 0;\n        while (!Q.empty()) {\n            i++;\n            int k = Q.size();\n            \n            for (int j = 0; j < k; j++) {\n                TreeNode* rt = Q.front();\n\n                if (rt->left) {\n                    Q.push(rt->left);\n                }\n\n                if (rt->right) {\n                    Q.push(rt->right);\n                }\n\n                Q.pop();\n\n                if (rt->left == NULL && rt->right == NULL) {\n                    return i;\n                }\n            }\n        }\n        return -1; \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false,"flag_type":1}