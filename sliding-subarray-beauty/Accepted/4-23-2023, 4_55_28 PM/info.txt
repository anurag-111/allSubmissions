{"id":938405662,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1682249128,"status":10,"status_display":"Accepted","runtime":"453 ms","url":"/submissions/detail/938405662/","is_pending":"Not Pending","title":"Sliding Subarray Beauty","memory":"185.8 MB","code":"/**\n * The Solution class implements a method to find the xth smallest negative integer in sliding windows\n * of size k in an array of integers.\n */\nclass Solution {\npublic:\n    /**\n     * getSubarrayBeauty method finds the xth smallest negative integer in sliding windows of size k\n     * in the given array of integers.\n     *\n     * @param nums A vector of integers representing the input array.\n     * @param k An integer representing the size of sliding windows.\n     * @param x An integer representing the position of the smallest negative integer to be found.\n     * @return A vector of integers representing the xth smallest negative integer in each sliding window.\n     */\n    vector<int> getSubarrayBeauty(vector<int>& nums, int k, int x) {\n        int n = nums.size(); \n        vector<int> freq(51, 0), ans; // Create a vector to store frequency of negative numbers and result\n\n        // Iterate through the input array with a sliding window approach\n        for(int i = 0, j = 0; i < n; i++) {\n            \n            // Count frequency of negative numbers in current sliding window\n            if(nums[i] < 0) {\n                freq[abs(nums[i])]++;\n            }\n        \n            if(i - j + 1 >= k) { // If window size is equal to k\n                \n                // Counter for xth smallest number\n                int cnt = 0; \n\n                // Calculate xth smallest number in current sliding window\n                for(int L = 50; L >= 1; L--) {\n                    cnt += freq[L]; // Add frequency of negative number to cnt\n                    if(cnt >= x) { \n                        ans.push_back(-L); // Push the xth smallest negative number into result vector\n                        break;\n                    }\n                }\n\n                // If no xth smallest number is present in current window, push 0 into result vector\n                if(cnt < x) {\n                    ans.push_back(0);\n                }\n\n                // Remove the leftmost element from the window and update frequency vector\n                if(nums[j] < 0) {   \n                    freq[abs(nums[j])]--; // Decrease frequency of leftmost elementfreq[abs(nums[j])]--;\n                }\n\n                j++; // Slide the window to the right\n            }\n        }\n\n        return ans; // Return the result vector\n    }\n};\n\n\n/*  \n    Coplexity :\n        Time Complexity : O(N * 50)\n        Space Complexity : O(50)\n*/\n\n","compare_resulttitle_slug":"sliding-subarray-beauty","has_notes":false,"flag_type":1}