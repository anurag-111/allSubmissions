{"id":999867194,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689913376,"status":10,"status_display":"Accepted","runtime":"228 ms","url":"/submissions/detail/999867194/","is_pending":"Not Pending","title":"Online Stock Span","memory":"84.1 MB","code":"#include <stack>\n\nclass StockSpanner {\npublic:\n    // Using a stack to keep track of the stock prices and their spans (number of consecutive days with prices less than or equal to the current day).\n    stack<pair<int, int>> stockStack;\n\n    StockSpanner() {\n        // Constructor to initialize the stockStack when a new object of StockSpanner is created.\n    }\n\n    \n    int next(int price) {\n        int span = 1; // Initialize the span to 1 for the current stock price.\n\n        // Calculate the span for the current stock price by checking the previous stock prices in the stack.\n        while (!stockStack.empty() && stockStack.top().first <= price) {\n            span += stockStack.top().second; // Add the span of the previous stock to the current span.\n            stockStack.pop(); // Remove the previous stock from the stack since its span has been considered.\n        }\n\n        // Add the current stock price and its span to the stack for future calculations.\n        stockStack.push({price, span});\n\n        return span; \n    }\n};\n\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner* obj = new StockSpanner();\n * int param_1 = obj->next(price);\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"online-stock-span","has_notes":false,"flag_type":1}