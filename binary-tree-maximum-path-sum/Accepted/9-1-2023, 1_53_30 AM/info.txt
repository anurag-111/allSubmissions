{"id":1037132001,"lang":"cpp","lang_name":"C++","time":"2 weeks, 6 days","timestamp":1693513410,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1037132001/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"28.2 MB","code":"class Solution {\nprivate:\n    int solve(TreeNode *root, int &maxPathSum) {\n        if (root == NULL) {\n            return 0;\n        }\n\n        int left = solve(root->left, maxPathSum);\n        int right = solve(root->right, maxPathSum);\n\n        int maxLeftOrRight = max(left, right);\n\n        // Calculate the maximum value that can be returned from the current node\n        int maxToReturn = max(root->val + maxLeftOrRight, root->val);\n\n        // Calculate the maximum path sum considering the path through the current node\n        int currentPathSum = max(root->val + left + right, maxToReturn);\n\n        // Update the overall maximum path sum found so far\n        maxPathSum = max(maxPathSum, currentPathSum);\n\n        return maxToReturn;\n    }\n\npublic:\n    int maxPathSum(TreeNode* root) {\n        int maxPathSum = root->val;\n        solve(root, maxPathSum);\n        return maxPathSum;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}