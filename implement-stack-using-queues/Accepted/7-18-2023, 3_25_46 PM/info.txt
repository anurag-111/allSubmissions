{"id":997450897,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689674146,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/997450897/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"6.8 MB","code":"class MyStack {\npublic:\n    \n    queue<int> q1; // First queue used to simulate the stack\n    queue<int> q2; // Second queue used for temporary storage during push operation\n    \n    MyStack() {\n        // Constructor, no explicit initialization needed\n    }\n    \n    // Pushes the given element 'x' onto the stack\n    void push(int x) {\n        q2.push(x); // Push the element to the temporary queue (q2)\n        \n        // Move elements from q1 to q2 to maintain stack order\n        while (!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n        \n        // Swap q1 and q2 to make q2 empty and keep the stack elements in q1\n        swap(q1, q2);\n    }\n    \n    // Removes and returns the top element of the stack.\n    // If the stack is empty, returns -1.\n    int pop() {\n        if (!q1.empty()) {\n            int element = q1.front(); // Retrieve the front element (top of stack)\n            q1.pop(); // Remove the front element (top of stack)\n            return element; // Return the removed element\n        } else {\n            return -1; // Stack is empty, return -1\n        }\n    }\n    \n    // Returns the top element of the stack without removing it.\n    int top() {\n        return q1.front(); // Return the front element (top of stack) from q1\n    }\n    \n    // Checks if the stack is empty.\n    bool empty() {\n        if (q1.empty()) {\n            return true; // If q1 is empty, the stack is empty, return true\n        } else {\n            return false; // If q1 is not empty, the stack is not empty, return false\n        }\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */\n\n\n/*\n    Time Complexity:\n    \n    The time complexity for each operation is as follows:\n    - Push  : O(n)\n    - Pop   : O(1)\n    - Top   : O(1)\n    - Empty : O(1)\n\n    Space complexity : O(n)\n\n*/\n","compare_result":"11111111111111111","title_slug":"implement-stack-using-queues","has_notes":false,"flag_type":1}