{"id":998731882,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689792965,"status":10,"status_display":"Accepted","runtime":"307 ms","url":"/submissions/detail/998731882/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"134.6 MB","code":"#include <vector>\n#include <deque>\n\nclass Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        deque<int> windowIndices; // Store indices of elements in the current window\n        vector<int> result; // Store the maximum values for each valid window\n        \n        for (int i = 0; i < nums.size(); i++) {\n            // Remove all elements out of range from the window\n            while (!windowIndices.empty() && windowIndices.front() <= i - k) {\n                windowIndices.pop_front();\n            }           \n            \n            // Remove elements smaller than nums[i] from the back of the deque\n            while (!windowIndices.empty() && nums[windowIndices.back()] <= nums[i]) {\n                windowIndices.pop_back();\n            }\n            \n            // Add current index to the window\n            windowIndices.push_back(i);\n            \n            // If we have a valid window, update the result with the maximum value\n            if (i >= k - 1) {\n                result.push_back(nums[windowIndices.front()]);\n            }\n        }\n         \n        return result;\n    }\n};\n\n// Time Complexity : O(n)\n// Space Complexity : O(k)\n","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}