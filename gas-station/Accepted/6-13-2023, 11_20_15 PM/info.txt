{"id":970511131,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1686678615,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/970511131/","is_pending":"Not Pending","title":"Gas Station","memory":"54.9 MB","code":"class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        int currentGas = 0; // Track the current gas remaining\n        int totalGas = 0; // Track the total gas remaining after completing the tour\n        int startStationIndex = 0; // Store the starting gas station index\n\n        for (int i = 0; i < cost.length; i++) {\n            currentGas += gas[i] - cost[i]; // Calculate net gas remaining at each station\n\n            if (currentGas < 0) {\n                totalGas += currentGas; // Update total gas remaining (negative value represents the gas deficit)\n                currentGas = 0; // Reset currentGas as we start from the next station\n                startStationIndex = i + 1; // Update the potential starting station index\n            }\n        }\n        \n        totalGas += currentGas; // Add the remaining currentGas to the totalGas\n        return totalGas >= 0 ? startStationIndex : -1; // Check if totalGas is non-negative, return the starting position if true, otherwise -1\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111","title_slug":"gas-station","has_notes":false,"flag_type":1}