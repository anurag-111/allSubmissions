{"id":993520224,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1689256681,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/993520224/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"19 MB","code":"class Solution {\nprivate :\n    int findMax(vector<int> &piles) {\n        int maxPile = INT_MIN;\n        for(int pile : piles) {\n            if(pile > maxPile) {\n                maxPile = pile;\n            }\n        }\n        return maxPile;\n    }\n\n    double hoursTaken(vector<int> &piles, int hours) {\n        double totalHours = 0;\n\n        for(int i = 0; i < piles.size(); i++) {\n            totalHours += ceil(double(piles[i]) / double(hours));\n        }\n\n        return totalHours;\n    }\n\npublic:\n    int minEatingSpeed(vector<int>& piles, int h) {\n        int low = 1, high = findMax(piles);\n        while(low <= high) {\n            int mid = low + (high - low) / 2;\n            double totalHours = hoursTaken(piles, mid);\n            \n            if(totalHours <= h) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return low;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}