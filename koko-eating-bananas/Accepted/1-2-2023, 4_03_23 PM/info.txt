{"id":869631316,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1672655603,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/869631316/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"43.3 MB","code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        int max = Integer.MIN_VALUE;\n        \n        for (int val : piles) {\n            max = Math.max(val, max);\n        }\n        \n        // for cases such as:\n        // [30,23,15,12,29] where h = 5 \n        // therefore k has to be equal to 30 so as to eat \n        // the bananas under h = 5\n        if (h == piles.length) {\n            return max;\n        }\n        \n        int low = 0;\n        int high = max;\n        int speed = Integer.MAX_VALUE;\n        \n        while (low <= high) {\n            int mid = low + (high - low)/2;\n            \n            if (isPossible(piles, h, mid)) {\n                speed = mid;\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return speed;\n    }\n    \n    private boolean isPossible (int[] piles, int h, int sp) {\n        int time = 0;\n        \n        for (int i = 0; i < piles.length; i++) {\n            time += Math.ceil((piles[i] * 1.0)/sp);\n        }\n        \n        return time <= h;\n     }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}