{"id":969631100,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1686578399,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/969631100/","is_pending":"Not Pending","title":"Summary Ranges","memory":"40.8 MB","code":"import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    // Helper method to format the range as a string\n    private String formatString(int start, int end) {\n        if (start == end) {\n            return Integer.toString(start); // Return a single number as a string if the range has only one element\n        } else {\n            return start + \"->\" + end; // Return the formatted range string\n        }\n    }\n    \n    // Main method to find and summarize ranges\n    public List<String> summaryRanges(int[] nums) {\n        List<String> result = new ArrayList<>();\n        \n        if (nums.length == 0) {\n            return result; // If the input array is empty, return an empty result list\n        }\n        \n        int rangeStart = nums[0]; // Initialize the start of the current range\n        int rangeEnd = nums[0]; // Initialize the end of the current range\n        \n        for (int i = 1; i < nums.length; i++) {\n            if (rangeEnd + 1 == nums[i]) {\n                rangeEnd = nums[i]; // Extend the current range if the next number is consecutive\n            } else {\n                result.add(formatString(rangeStart, rangeEnd)); // Add the formatted range to the result list\n                rangeStart = rangeEnd = nums[i]; // Start a new range with the current number\n            }\n        }\n        \n        result.add(formatString(rangeStart, rangeEnd)); // Add the last range to the result list\n        \n        return result; // Return the result list containing the summarized ranges\n    }\n}\n","compare_result":"111111111111111111111111111111","title_slug":"summary-ranges","has_notes":false,"flag_type":1}