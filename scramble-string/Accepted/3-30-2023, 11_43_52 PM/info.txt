{"id":924978052,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1680200032,"status":10,"status_display":"Accepted","runtime":"158 ms","url":"/submissions/detail/924978052/","is_pending":"Not Pending","title":"Scramble String","memory":"36.8 MB","code":"class Solution {\n  unordered_map<string, bool> dp;\n  bool scrambleAndMatch(string s1, string s2) {\n    int n = s1.length();\n\n    if (n == 1) {\n        return (s1 == s2);\n    }\n    if (s1 == s2) {\n        return true;\n    }\n\n    string key = s1 + \".\" + s2;\n\n    if (dp.find(key) != dp.end()) {\n        return dp[key];\n    }\n\n    for (int i = 1; i < n; i++) {\n        if (scrambleAndMatch(s1.substr(0, i), s2.substr(0, i)) && scrambleAndMatch(s1.substr(i), s2.substr(i))) {\n            return dp[key] = true;\n        }\n\n        if (scrambleAndMatch(s1.substr(0, i), s2.substr(n-i)) && scrambleAndMatch(s1.substr(i), s2.substr(0, n-i))) {\n            return dp[key] = true;\n        }\n    }\n\n    return dp[key] = false;\n  }\n\n  bool scrambleAndMatch(int start, int end, int matchStart, int matchEnd, string& s1, string& s2) {\n    // cout << start << \"\\t\" << end << \"\\t\" << matchStart << \"\\t\" << matchEnd << endl;\n    // cout << s1.substr(start, end-start+1) << \"\\t\" <<  s2.substr(matchStart, matchEnd-matchStart+1) << endl;\n    \n    if (start == end) {\n        return s1[start] == s2[matchStart];\n    }\n\n\n    for (int i = 1; start + i < end; i++) {\n      if (scrambleAndMatch(start, start + i - 1, matchStart, matchStart + i - 1, s1, s2) &&\n          scrambleAndMatch(start + i, end, matchStart + i, matchEnd, s1, s2)) {\n              return true;\n          }\n      \n      if (scrambleAndMatch(start, start+i-1, matchEnd-i+1, matchEnd, s1, s2) &&\n          scrambleAndMatch(start+i, end, matchStart, matchEnd-i, s1, s2)) {\n              return true;\n          }\n    }\n\n    return false;\n  }\n\npublic:\n  bool isScramble(string s1, string s2) {\n    if (s1.length() == 1) {\n        return s1 == s2;\n    }\n\n    // return scrambleAndMatch(0, s1.length()-1, 0, s2.length()-1, s1, s2);\n    //dp.clear();\n    \n    return scrambleAndMatch(s1, s2);\n  }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"scramble-string","has_notes":false,"flag_type":1}