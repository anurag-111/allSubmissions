{"id":893283092,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1675769315,"status":10,"status_display":"Accepted","runtime":"404 ms","url":"/submissions/detail/893283092/","is_pending":"Not Pending","title":"Word Search","memory":"8 MB","code":"class Solution {\npublic :\n    bool exist(vector<vector<char>>& board, string word) {\n        for(int i = 0; i < board.size(); ++i) {\n            for(int j = 0; j < board[0].size(); ++j) {\n                if(adjacentSearch(board, word, i, j, 0)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\nprivate :\n    bool adjacentSearch(vector<vector<char>>& board, const string& word, int i, int j, int index)\n    {\n        if(index == word.size()) {\n            return true;\n        } \n\n        if(i < 0 || j < 0 || i > board.size() - 1 || j > board[0].size() - 1) {\n            return false;\n        }\n\n        if(board[i][j] != word[index]) {\n            return false;\n        }\n       \n        board[i][j] = '*'; // to avoid duplicated search\n        bool furtherSearch =  adjacentSearch(board, word, i+1, j, index+1) || // up\n                              adjacentSearch(board, word, i-1, j, index+1) || // down\n                              adjacentSearch(board, word, i, j-1, index+1) || // left\n                              adjacentSearch(board, word, i, j+1, index+1);   // right\n        \n        board[i][j] = word[index]; // modify it back.\n        return furtherSearch;\n    }\n};\n\n// Time Complexity: O(mn)\n// Space Complexity:O((word_length)^2)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}