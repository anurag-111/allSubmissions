{"id":955908665,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1684859273,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/955908665/","is_pending":"Not Pending","title":"Kth Largest Element in a Stream","memory":"19.6 MB","code":"class KthLargest {\npublic:\n    priority_queue<int, vector<int>, greater<int>> pq;\n    int k_value;\n\n    // Constructor to initialize the KthLargest object\n    KthLargest(int k, vector<int>& nums) {\n        k_value = k;\n        \n        // Inserting elements from nums into the priority queue\n        for (auto itr : nums) {\n            pq.push(itr);\n            \n            // If the size of priority queue exceeds k, remove the smallest element\n            if (pq.size() > k) {\n                pq.pop();\n            }\n        }\n    }\n    \n    // Function to add a new element and return the kth largest element\n    int add(int val) {\n        pq.push(val);\n        \n        // If the size of priority queue exceeds k, remove the smallest element\n        if (pq.size() > k_value) {\n            pq.pop();\n        }\n        \n        return pq.top(); // Return the current kth largest element\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */\n","compare_result":"1111111111","title_slug":"kth-largest-element-in-a-stream","has_notes":false,"flag_type":1}