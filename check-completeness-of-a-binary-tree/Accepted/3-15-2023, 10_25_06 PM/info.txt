{"id":915771536,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1678899306,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/915771536/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"42.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        \n        if(root == null) {\n            return true;\n        }\n        \n        Queue<TreeNode> q = new LinkedList<TreeNode>();\n        \n        q.add(root);\n        \n        while(!q.isEmpty()){\n            \n            TreeNode cur = q.remove();\n            \n            if(cur == null) {\n                break;\n            } \n            \n            q.add(cur.left);\n            q.add(cur.right);\n        }\n        \n        while(!q.isEmpty() && q.peek() == null) {\n            q.remove();\n        } \n\n        return q.isEmpty();\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false,"flag_type":1}