{"id":1036254225,"lang":"cpp","lang_name":"C++","time":"3Â weeks","timestamp":1693423622,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1036254225/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"44 MB","code":"class Codec {\nprivate:\n    int index;\n    string doSerialize(TreeNode* root) {\n        if (root == NULL) {\n            return \"X\";\n        }\n\n        string left = doSerialize(root->left);\n        string right = doSerialize(root->right);\n\n        string serialTree = to_string(root->val) + \",\" + left + \",\" + right;\n\n        return serialTree;\n    }\n\n    TreeNode* doDeserialize(vector<string>& treeData) {\n        if (index == treeData.size() || treeData[index] == \"X\") {\n            index++;\n            return NULL;\n        }\n\n        TreeNode* node = new TreeNode(stoi(treeData[index]));\n        index++;\n        node->left = doDeserialize(treeData);\n        node->right = doDeserialize(treeData);\n\n        return node;\n    }\n\n    static vector<string> split(const string& data, char delimiter) {\n        stringstream ss(data);\n        vector<string> tokens;\n        string token;\n\n        while (getline(ss, token, delimiter)) {\n            tokens.push_back(token);\n        }\n\n        return tokens;\n    }\n\npublic:\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        return doSerialize(root);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        vector<string> treeData = split(data, ',');\n\n        index = 0;\n        return doDeserialize(treeData);\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}