{"id":883057000,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1674390675,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/883057000/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"54.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n    \n    private int index;\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n        if (root == null) {\n            return \"X\";\n        }\n        \n        String left = serialize(root.left);\n        String right = serialize(root.right);\n        \n        return root.val + \",\" + left + \",\" + right;\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n        String[] serialTree = data.split(\",\");\n        return deserializeTree(serialTree);\n    }\n    \n    private TreeNode deserializeTree(String[] serialTree) {\n        \n        if (index == serialTree.length || serialTree[index].equals(\"X\")) {\n            index++;\n            return null;\n        }\n        \n        TreeNode root = new TreeNode(Integer.parseInt(serialTree[index]));\n        index++;\n        root.left = deserializeTree(serialTree);\n        root.right = deserializeTree(serialTree);\n        return root;\n    }\n}\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}