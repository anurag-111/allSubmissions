{"id":1036253460,"lang":"cpp","lang_name":"C++","time":"3Â weeks","timestamp":1693423552,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1036253460/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"N/A","code":"class Codec {\nprivate:\n    int index;\n    stringstream doSerialize(TreeNode* root) {\n        if(root == NULL) {\n            return stringstream(\"X\");\n        }\n\n        stringstream left = doSerialize(root -> left);\n        stringstream right = doSerialize(root -> right);\n\n        stringstream serialTree;\n        serialTree << root -> val << \",\" << left.str() << \",\" << right.str();\n        \n        return serialTree;\n    }\n\n    TreeNode* doDeserialize(vector<string> treeData) {\n        if(index == treeData.size() || treeData[index] == \"X\") {\n            index++;\n            return NULL;\n        }\n\n        TreeNode* node = new TreeNode(stoi(treeData[index]));\n        index++;\n        node -> left =  doDeserialize(treeData);\n        node -> right = doDeserialize(treeData);\n\n        return node;\n    }\n\n    vector<string> split(string data, char delimeter) {\n        stringstream ss(data);        \n        vector<string> tokens;\n        string token;\n\n        while(getline(ss, token, delimeter)) {\n            tokens.push_back(token);\n        }\n\n        return tokens;        \n    }\n\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        return doSerialize(root).str();\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        vector<string> treeData = split(data, ',');\n\n        index = 0;\n        TreeNode* root = doDeserialize(treeData);\n        return root;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111111111111111111111111111111111111111111000","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}