{"id":954523582,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1684676071,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/954523582/","is_pending":"Not Pending","title":"Remove Covered Intervals","memory":"11.3 MB","code":"class Solution {\npublic:\n    int removeCoveredIntervals(vector<vector<int>>& intervals) {\n        if (intervals.empty()) {\n            return 0;\n        }\n\n        // The custom comparator ensures that the intervals are sorted in ascending order based on \n        // their start points. If the start points are equal, the comparator considers the end points \n        // to determine the order. In this case, intervals with the same start point are sorted by \n        // their end points in descending order.\n        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {\n            if (a[0] == b[0]) {\n                return a[1] > b[1];\n            }\n            return a[0] < b[0];\n        });\n\n        int notCoveredCount = 1;  // Count of non-covered intervals\n        int prevEnd = intervals[0][1];  // Keep track of the maximum end point encountered so far\n\n        // Iterate through sorted intervals\n        for (int i = 1; i < intervals.size(); i++) {\n            // If the current interval's end point is greater than prevEnd, it is not covered\n            if (intervals[i][1] > prevEnd) {\n                notCoveredCount++;  // Increment the count of non-covered intervals\n                prevEnd = intervals[i][1];  // Update prevEnd to the end point of the current interval\n            }\n        }\n\n        return notCoveredCount;\n    }\n};\n","compare_result":"1111111111111111111111111111111111","title_slug":"remove-covered-intervals","has_notes":false,"flag_type":1}