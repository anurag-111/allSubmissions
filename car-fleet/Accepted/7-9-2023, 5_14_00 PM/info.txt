{"id":990121703,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1688903040,"status":10,"status_display":"Accepted","runtime":"344 ms","url":"/submissions/detail/990121703/","is_pending":"Not Pending","title":"Car Fleet","memory":"96.5 MB","code":"class Solution {\npublic:\n    /**\n     * Calculate the number of car fleets that reach the target.\n     * \n     * @param target The target position.\n     * @param position The positions of cars.\n     * @param speed The speeds of cars.\n     * @return The number of car fleets.\n     */\n    int carFleet(int target, vector<int>& position, vector<int>& speed) {\n        if (position.empty() || speed.empty()) {\n            // Empty input arrays, no car fleet possible\n            return 0;\n        }\n        \n        map<int, double, greater<int>> carMap; // Map to store position and time-to-target ratios\n        \n        for (int i = 0; i < position.size(); i++) {\n            double timeToTarget = double(target - position[i]) / speed[i];\n            carMap[position[i]] = timeToTarget; // Store position and time-to-target ratio in the map\n        }\n        \n        int carFleetCount = 0;  // Number of car fleets\n        double currentFleetTime = 0.0;  // Current maximum time-to-target ratio\n        \n        for (auto car : carMap) {\n            if (car.second > currentFleetTime) {\n                currentFleetTime = car.second;\n                carFleetCount++;  // Increase car fleet count if the time-to-target ratio is greater than the current maximum\n            }\n        }\n        \n        return carFleetCount;\n    }\n};\n\n/*\n    Time Complexity: O(N log N)\n    ---------------------------\n\n    The time complexity is dominated by the sorting of the map carMap, which has N elements. \n    The insertion of elements into the map takes O(log N) time for each element. \n    Hence, the overall time complexity is O(N log N), where N is the number of cars.\n    \n    Space Complexity: O(N)\n    ----------------------\n\n    The space complexity is determined by the map carMap, which can store up to N elements. \n    Therefore, the space complexity is O(N), where N is the number of cars.\n*/","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"car-fleet","has_notes":false,"flag_type":1}