{"id":919916789,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1679461850,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/919916789/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"129.6 MB","code":"class Solution {\npublic:\n    void dfs(vector<vector<pair<int, int>>> &adj, int curr, vector<int> &vis, int &mi) {\n        if (vis[curr]) {\n            return;\n        }\n            \n\n        vis[curr] = 1;\n \n        for (auto nxt : adj[curr]) {\n            mi = min(mi, nxt.second);\n            dfs(adj, nxt.first, vis, mi);\n        }\n \n        return;\n    }\n    int minScore(int n, vector<vector<int>> &roads)\n    {\n        vector<vector<pair<int, int>>> adj(n + 1);\n \n        for (int i = 0; i < roads.size(); i++) {\n            adj[roads[i][0]].push_back({roads[i][1], roads[i][2]});\n            adj[roads[i][1]].push_back({roads[i][0], roads[i][2]});\n        }\n \n        int mi = INT_MAX;\n        vector<int> vis(n + 1, 0);\n        dfs(adj, 1, vis, mi);\n \n        return mi;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false,"flag_type":1}