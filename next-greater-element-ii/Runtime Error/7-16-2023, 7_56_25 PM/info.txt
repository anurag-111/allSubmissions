{"id":995934616,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689517585,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/995934616/","is_pending":"Not Pending","title":"Next Greater Element II","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> nextGreaterElements(vector<int>& nums) {\n        stack<int> numStack; // Stack to store elements for finding the next greater element\n        const int MAX_NUM = 10001; // Maximum possible value of an element in nums\n        vector<int> nextGreater(MAX_NUM, -1); // Array to store the next greater element for each number\n        vector<int> result(nums.size(), -1); // Array to store the final result\n        \n        // Two passes on nums to handle circular array behavior\n        for (int pass = 0; pass < 2; pass++) {\n            for (int i = 0; i < nums.size(); i++) {\n                while (!numStack.empty() && numStack.top() < nums[i]) {\n                    nextGreater[numStack.top()] = nums[i];\n                    numStack.pop();\n                }\n                numStack.push(nums[i]);\n            }\n        }\n        \n        // Find the next greater element for each number in nums\n        for (int i = 0; i < nums.size(); i++) {\n            if (nextGreater[nums[i]]) {\n                result[i] = nextGreater[nums[i]];\n            }\n        }\n        \n        return result;\n    }\n};\n","compare_result":"1111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"next-greater-element-ii","has_notes":false,"flag_type":1}