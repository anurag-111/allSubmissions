{"id":916697058,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1679033419,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/916697058/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"45 MB","code":"struct Node {\n    \n\tNode *links[26];\n\tbool flag = false;\n\n\t// Checks if the reference trie is present or not\n\tbool containKey(char ch) {\n\t\treturn (links[ch - 'a'] != NULL);\n\t}\n\n\t// Creating reference trie\n\tvoid put(char ch, Node *node) {\n\t\tlinks[ch - 'a'] = node;\n\t}\n\n\t// To get the next node for traversal\n\tNode *get(char ch) {\n\t\treturn links[ch - 'a'];\n\t}\n\n\t// Setting flag to true at the end of the word\n\tvoid setEnd() {\n\t\tflag = true;\n\t}\n\n\t// Checking if the word is completed or not\n\tbool isEnd() {\n\t\treturn flag;\n\t}\n};\n\nclass Trie {\n\nprivate:\n\tNode* root;\n\npublic:\n\tTrie() {\n\n\t\t// Creating new obejct\n\t\troot = new Node();\n\t}\n\n\tvoid insert(string word) {\n\n\t\t// Initializing dummy node pointing to root initially\n\t\tNode *node = root;\n\n\t\tfor (int i = 0; i < word.size(); i++) {\n\t\t\tif (!node->containKey(word[i])) {\n\t\t\t\tnode->put(word[i], new Node());\n\t\t\t}\n\n\t\t\t// Moves to reference trie\n\t\t\tnode = node->get(word[i]);\n\t\t}\n\t\tnode->setEnd();\n\t}\n\n\tbool search(string word) {\n\t\tNode *node = root;\n\t\tfor (int i = 0; i < word.size(); i++) {\n\t\t\tif (!node->containKey(word[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnode = node->get(word[i]);\n\t\t}\n\t\treturn node->isEnd();\n\t}\n\n\tbool startsWith(string prefix) {\n\t\tNode* node = root;\n\t\tfor (int i = 0; i < prefix.size(); i++) {\n\t\t\tif (!node->containKey(prefix[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnode = node->get(prefix[i]);\n\t\t}\n\t\treturn true;\n\t}\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}