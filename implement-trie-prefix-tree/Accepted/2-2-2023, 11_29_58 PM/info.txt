{"id":890222892,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1675360798,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/890222892/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"51 MB","code":"// https://leetcode.com/problems/implement-trie-prefix-tree\n\nclass Trie {\n    \n    private TrieNode root;\n    \n    /** Initialize your data structure here. */\n    public Trie() {\n        root = new TrieNode();\n    }\n    \n    /** Inserts a word into the trie. */\n    public void insert(String word) {\n        TrieNode temp = root;\n        for (int i = 0; i < word.length(); i++) {\n            char ch = word.charAt(i);\n            int index = (int) (ch - 'a');\n            \n            if (temp.children[index] == null) {\n                temp.children[index] = new TrieNode();\n            }\n            \n            temp = temp.children[index];\n        }\n        temp.isEndOfWord = true;\n    }\n    \n    /** Returns if the word is in the trie. */\n    public boolean search(String word) {\n        \n        TrieNode temp = root;\n        for (int i = 0; i < word.length(); i++) {\n            char ch = word.charAt(i);\n            int index = (int) (ch - 'a');\n            \n            if (temp.children[index] == null) {\n                return false;\n            }\n            \n            temp = temp.children[index];\n        }\n        \n        return temp.isEndOfWord;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    public boolean startsWith(String prefix) {\n        TrieNode temp = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            char ch = prefix.charAt(i);\n            int index = (int) (ch - 'a');\n            \n            if (temp.children[index] == null) {\n                return false;\n            }\n            \n            temp = temp.children[index];\n        }\n        return true;\n    }\n    \n    class TrieNode {\n        TrieNode[] children;\n        boolean isEndOfWord;\n        \n        public TrieNode() {\n            children = new TrieNode[26];\n            isEndOfWord = false;\n        }\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}