{"id":996105316,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689532436,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/996105316/","is_pending":"Not Pending","title":"Final Prices With a Special Discount in a Shop","memory":"10 MB","code":"class Solution {\npublic:\n\n    /**\n     * @brief Calculates the final prices with discounts.\n     * \n     * Given an array of prices, this function calculates the final prices for each element,\n     * considering the discount offered.\n     * \n     * @param prices The input array containing the original prices.\n     * @return A vector containing the final prices after applying the discounts.\n     */\n\n    vector<int> finalPrices(vector<int>& prices) {\n        stack<int> discountIndices; // Stack to store the indices of elements for which we need to find the discount\n        vector<int> discounts(prices.size(), 0); \n        vector<int> finalPrices(prices.size()); \n        \n        // Traverse the array to find discounts for each element\n        for (int i = 0; i < prices.size(); i++) {\n            // While the stack is not empty and the current element's price is less than or equal to the element at the top of the stack\n            while (!discountIndices.empty() && prices[discountIndices.top()] >= prices[i]) {\n                // Calculate the discount for the element at the top of the stack\n                discounts[discountIndices.top()] = prices[i];\n                discountIndices.pop();\n            }\n            // Push the index of the current element onto the stack\n            discountIndices.push(i);\n        }\n        \n        // Calculate the final prices after applying the discounts\n        for (int i = 0; i < prices.size(); i++) {\n            finalPrices[i] = prices[i] - discounts[i];\n        }\n        \n        return finalPrices;\n    }\n};\n\n// Time Complexity: O(N), where N is the number of elements in the input array.\n//                  The algorithm processes each element in the array exactly once.\n// Space Complexity: O(N), where N is the number of elements in the input array.\n//                   The space is used to store the output array, the stack, and the discounts array,\n//                   each of which can have at most N elements.\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"final-prices-with-a-special-discount-in-a-shop","has_notes":false,"flag_type":1}