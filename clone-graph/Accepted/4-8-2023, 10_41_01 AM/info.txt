{"id":929956921,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1680930661,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/929956921/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.6 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        if(!node) {\n            return node;\n        }\n\n        // Creating a map for the mapping of the deep copy of nodes\n        unordered_map<Node*, Node*> map;\n        Node* clone = new Node(node->val);\n        map[node] = clone;\n\n        // Creating a queue for the neighbouring edges\n        queue<Node*> q;\n        q.push(node);\n\n        while(!q.empty()) {\n            Node* cur = q.front();\n            q.pop();\n\n            for(Node* neigh : cur->neighbors) {\n                \n                // Insert the neighbors if not already present\n                if(map.find(neigh) == map.end()) {     \n                    map[neigh] = new Node(neigh->val); \n                    q.push(neigh);\n                }\n\n                // Connection of the neighboring edges\n                map[cur]->neighbors.push_back(map[neigh]);\n            }\n        }\n\n        // Returning the copy of the given node which \n        // was a  reference to the cloned graph.\n        return map[node];\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}