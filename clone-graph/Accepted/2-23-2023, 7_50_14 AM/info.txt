{"id":903247534,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1677118814,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/903247534/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.6 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        \n        if(!node) {\n            return node;\n        }\n           \n        \n        unordered_map<Node*,Node*> mp;\n        Node *clone = new Node(node->val);\n        mp[node] = clone;\n        \n        queue<Node*> q;\n        q.push(node);\n        \n        while(!q.empty()){\n            Node *cur = q.front();\n            q.pop();\n            for(Node *neigh: cur->neighbors) {\n                \n                if(mp.find(neigh)==mp.end()) {\n                    mp[neigh] = new Node(neigh->val);\n                    q.push(neigh);\n                }\n                mp[cur]->neighbors.push_back(mp[neigh]);\n                \n            }\n        }\n        \n        return mp[node];\n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}