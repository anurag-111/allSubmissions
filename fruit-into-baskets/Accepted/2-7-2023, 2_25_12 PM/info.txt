{"id":893214191,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1675760112,"status":10,"status_display":"Accepted","runtime":"202 ms","url":"/submissions/detail/893214191/","is_pending":"Not Pending","title":"Fruit Into Baskets","memory":"71.3 MB","code":"class Solution {\npublic:\n    int totalFruit(vector<int>& tree) {\n        \n        int n = tree.size();\n        int start = 0;\n        unordered_map<int, int> map;\n        int type = 0;\n        int max_freq = INT_MIN;\n\n        for(int end = 0; end < n; end++) {  \n            if (map.count(tree[end]) == 0) {            // storing the frequency of types of elements\n                type++;\n            }\n           map[tree[end]]++;\n\n           while(type > 2) {                            // reducing the frequency or removing the element when it exceeds the condition.\n               map[tree[start]]--;\n               if(map[tree[start]] == 0) {\n                   map.erase(tree[start]);\n                   type--;\n               }\n               start++;\n           } \n           max_freq = max(max_freq, end - start + 1);   // maximum number of fruits that can be picked.\n        }\n        return max_freq;\n    }\n};\n\n/*  \n    Explanation :\n    The longest length of subarrays with at most 2 different elements.\n\n    Approach :\n    Solve with sliding window,\n    and maintain a hashmap counter,\n    which count the number of elements between the two pointers.\n\n    Complexity :\n    Time  : O(n)\n    Space : O(1)\n\n*/\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"fruit-into-baskets","has_notes":false,"flag_type":1}