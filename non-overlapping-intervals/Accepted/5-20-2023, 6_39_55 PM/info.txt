{"id":953906380,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1684588195,"status":10,"status_display":"Accepted","runtime":"487 ms","url":"/submissions/detail/953906380/","is_pending":"Not Pending","title":"Non-overlapping Intervals","memory":"89.8 MB","code":"class Solution {\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        sort(intervals.begin(), intervals.end()); // Sort all intervals in ascending order\n        int count = 0; // Count of number of intervals to be removed\n        int n = intervals.size(); // Number of intervals\n        int left = 0; // Index of the left interval\n        int right = 1; // Index of the right interval\n        \n        while (right < n) { // Continue until all intervals are compared\n            if (intervals[left][1] <= intervals[right][0]) {\n                // Non-overlapping case: No overlap, move to the next pair\n                left = right;\n                right++;\n            } else if (intervals[left][1] <= intervals[right][1]) {\n                // Overlapping case 1: Remove the right interval as it extends beyond or ends at the same time as the left interval\n                count++;\n                right++;\n            } else {\n                // Overlapping case 2: Remove the left interval as it completely contains the right interval\n                count++;\n                left = right;\n                right++;\n            }\n        }\n        \n        return count;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"non-overlapping-intervals","has_notes":false,"flag_type":1}