{"id":895878413,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1676115191,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/895878413/","is_pending":"Not Pending","title":"N-Queens II","memory":"38.6 MB","code":"// https://leetcode.com/problems/n-queens\n\nclass Solution {\n    public int totalNQueens(int n) {\n        \n        char[][] board = new char[n][n];\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(board[i], '.');\n        }\n        return solve(0, n, board);\n    }\n    \n    private int solve(int row, int n, char[][] board) {\n        if (row == n) {\n            return 1;\n        }\n        int count = 0;\n        for (int col = 0; col < n; col++) {\n            \n            if (isValid(row, col, n, board)) {\n                board[row][col] = 'Q';\n                count += solve(row + 1, n, board);\n                board[row][col] = '.';\n            }\n        }\n        return count;\n    }\n    \n    private boolean isValid(int row, int col, int n, char[][] board) {\n        \n        // 1. we always place queen in a new row, so need not check for attacking queens in other rows\n        \n        // 2. Check if there are other attacking queens in the column = col\n        for (int i = 0; i < row; i++) {\n            if (board[i][col] == 'Q') {\n                return false;\n            }\n        }\n        \n        //3. check if the diag from left to right has attacking queens. \n        // Need to check only for the diagonals above, as the remaining rows have not yet been filled.\n        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            \n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        \n        // 4. Similarly, check for diagonal from right to left\n        \n        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\n            if (board[i][j] == 'Q') {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}