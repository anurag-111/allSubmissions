{"id":893354720,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1675778274,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/893354720/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"54.6 MB","code":"class Solution {\n    private List<List<String>> result = new ArrayList<>();\n\n    public List<List<String>> partition(String s) {\n\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        List<String> partition = new ArrayList<>();    \n        findPalindromicPartitions(s, partition);\n        return result;\n    }\n\n    private void findPalindromicPartitions(String s, List<String> partition) {\n\n        if (s.length() == 0) {\n            result.add(new ArrayList<>(partition));\n            return;\n        }\n\n        for (int i = 0; i < s.length(); i++) {\n            String prefix  = s.substring(0, i + 1);\n            if (isPalindrome(prefix)) {\n                String remaining = s.substring(i + 1);\n                partition.add(prefix);\n                findPalindromicPartitions(remaining, partition);\n                partition.remove(partition.size() - 1);\n            }\n        }\n    }\n\n    private boolean isPalindrome(String s) {\n        int start = 0, end = s.length() - 1;\n\n        while (start <= end) {\n            if (s.charAt(start) != s.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}