{"id":893386334,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1675781342,"status":10,"status_display":"Accepted","runtime":"252 ms","url":"/submissions/detail/893386334/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"163.1 MB","code":"class Solution {\nprivate:\n    vector<vector<string>> result;\n   \n    bool isPalindrome(string prefix) {\n        int start = 0;\n        int end = prefix.size() - 1;\n        int flag = 0;\n\n        while(start <= end) {\n            if(prefix[start] != prefix[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n            \n    }\n    \n    void findPalindromicPartitions(string s, vector<string> partition) {\n         if (s.size() == 0) {\n             result.push_back(partition);\n             return;\n         }   \n        \n        for(int i = 0; i < s.size(); i++) {\n            string prefix = s.substr(0, i + 1);\n            if(isPalindrome(prefix)) {\n                int start = i + 1;\n                int end = s.size() - 1;\n                int size = end - start + 1;\n                string remaining = s.substr(i + 1, size);\n                partition.push_back(prefix);\n                findPalindromicPartitions(remaining, partition);\n                partition.pop_back();\n            }\n        }        \n    }\n    \npublic:\n    vector<vector<string>> partition(string s) {\n        if (s.size() == 0) {\n            return result;\n        }\n\n        vector<string> partition;\n        findPalindromicPartitions(s, partition);\n        return result;\n    }\n};\n\n\n","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}