{"id":982264935,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1688034582,"status":10,"status_display":"Accepted","runtime":"90 ms","url":"/submissions/detail/982264935/","is_pending":"Not Pending","title":"Hand of Straights","memory":"28.2 MB","code":"class Solution {\npublic:\n    bool isNStraightHand(vector<int>& hand, int groupSize) {\n        map<int, int> cardCounts;  // Map to store the count of each card\n        \n        // Count the occurrences of each card in the hand\n        for (auto card : hand) {\n            cardCounts[card]++;\n        }\n\n        sort(hand.begin(), hand.end());  // Sort the hand in ascending order\n\n        for (int i = 0; i < hand.size(); i++) {\n            if (cardCounts[hand[i]] == 0) {\n                continue;  // Card already used or part of a group, skip it\n            }\n\n            // Check for consecutive cards required for the group\n            for (int j = 0; j < groupSize; j++) {\n                // Calculate the value of the current card in the iteration of the inner loop\n                int currCard = hand[i] + j; \n\n                if (cardCounts[currCard] == 0) {\n                    return false;  // Current card not available, can't form a group\n                }\n\n                cardCounts[currCard]--;  // Decrement the count of the current card\n            }\n        }\n\n        return true;  // Able to form groups of size groupSize\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"hand-of-straights","has_notes":false,"flag_type":1}