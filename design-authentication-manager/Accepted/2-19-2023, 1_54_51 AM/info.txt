{"id":900565936,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1676751891,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/900565936/","is_pending":"Not Pending","title":"Design Authentication Manager","memory":"30.2 MB","code":"class AuthenticationManager {\npublic:\n\t// used for mapping tokenId with generation time\n    unordered_map<string, int > mp;\n    int ttl;\n\n    AuthenticationManager(int timeToLive) : ttl(timeToLive){}\n    \t\n    void generate(string tokenId, int currentTime) {\n\t\t// store tokenId mapped with time of generation\n        mp[tokenId] = currentTime;\n    }\n    \n    void renew(string tokenId, int currentTime) {\n\t\t// tokenId must be already created and time since generation should be less than TTL\n        if(mp.count(tokenId) && currentTime - mp[tokenId] < ttl)\n            mp[tokenId] = currentTime; // renew if condition is satisfied\n    }\n    \n    int countUnexpiredTokens(int currentTime) {\n        int cnt = 0;\n        for(auto& token: mp)\n\t\t\t// count all tokens which time since generation less than TTL\n            if(currentTime - token.second < ttl) cnt++;\n        return cnt;\n    }\n};\n\n/**\n * Your AuthenticationManager object will be instantiated and called as such:\n * AuthenticationManager* obj = new AuthenticationManager(timeToLive);\n * obj->generate(tokenId,currentTime);\n * obj->renew(tokenId,currentTime);\n * int param_3 = obj->countUnexpiredTokens(currentTime);\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-authentication-manager","has_notes":false,"flag_type":1}