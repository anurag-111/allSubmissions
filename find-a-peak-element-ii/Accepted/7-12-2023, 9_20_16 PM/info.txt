{"id":992788721,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1689177016,"status":10,"status_display":"Accepted","runtime":"180 ms","url":"/submissions/detail/992788721/","is_pending":"Not Pending","title":"Find a Peak Element II","memory":"46.3 MB","code":"class Solution {\nprivate:\n    int calculateMax(vector<int>& array, int end) {\n        int maxVal = INT_MIN;\n        int pos = -1;\n        for (int i = 0; i <= end; i++) {\n            if (array[i] > maxVal) {\n                maxVal = array[i];\n                pos = i;\n            }\n        }\n        return pos;\n    }\n\npublic:\n    vector<int> findPeakGrid(vector<vector<int>>& mat) {\n        int rows = mat.size();\n        int cols = mat[0].size();\n\n        int startRow = 0;\n        int endRow = rows - 1; \n\n        while (startRow <= endRow) {\n            int midRow = startRow + (endRow - startRow) / 2;\n\n            int maxMidRow = calculateMax(mat[midRow], cols - 1); \n\n            if (midRow == 0) {\n                if (mat[midRow][maxMidRow] > mat[midRow + 1][maxMidRow]) {\n                    return {midRow, maxMidRow};\n                }\n            }\n\n            if (midRow == rows - 1) {\n                if (mat[midRow][maxMidRow] > mat[midRow - 1][maxMidRow]) {\n                    return {midRow, maxMidRow};\n                }\n            }\n\n            if (mat[midRow][maxMidRow] > mat[midRow + 1][maxMidRow] && mat[midRow][maxMidRow] > mat[midRow - 1][maxMidRow]) {\n                return {midRow, maxMidRow};\n            }\n\n            if (mat[midRow][maxMidRow] < mat[midRow + 1][maxMidRow]) {\n                startRow = midRow + 1; \n            } else {\n                endRow = midRow - 1;\n            }\n        }\n\n        // No peak element found in the matrix\n        return {-1, -1};\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"find-a-peak-element-ii","has_notes":false,"flag_type":1}