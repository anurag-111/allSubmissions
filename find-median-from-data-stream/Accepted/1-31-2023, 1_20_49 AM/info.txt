{"id":888329514,"lang":"cpp","lang_name":"C++","time":"7 months, 3 weeks","timestamp":1675108249,"status":10,"status_display":"Accepted","runtime":"424 ms","url":"/submissions/detail/888329514/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"117.1 MB","code":"class MedianFinder {\npublic:\n    priority_queue<int> maxHeap; //MaxHeap to store a half of low numbers\n    priority_queue<int, vector<int>, greater<int>> minHeap; //MinHeap to store a half of high numbers\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        maxHeap.push(num);\n        minHeap.push(maxHeap.top());\n        maxHeap.pop();\n        if (minHeap.size() > maxHeap.size()) {\n            maxHeap.push(minHeap.top());\n            minHeap.pop();\n        }\n    }\n    \n    double findMedian() {\n        if (maxHeap.size() > minHeap.size()) {\n            return maxHeap.top();\n        }\n        return (maxHeap.top() + minHeap.top()) / 2.0;\n    }\n};\n\n// Time Complexity :\n//  Constructor: O(1)\n//  addNum: O(logN)\n//  findMedian: O(1)\n// Space: O(N)\n\n\n//https://assets.leetcode.com/users/images/0eb8feba-cbfa-4f73-8d26-9aad226bdbc5_1626016093.9717174.png\n\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}