{"id":882228015,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1674283480,"status":10,"status_display":"Accepted","runtime":"61 ms","url":"/submissions/detail/882228015/","is_pending":"Not Pending","title":"LRU Cache","memory":"111.8 MB","code":"class LRUCache {\n    \n    private DoublyLinkedList head;\n    private DoublyLinkedList tail;\n    private int count;\n    private int capacity;\n    private Map<Integer, DoublyLinkedList> mp;\n    \n    public LRUCache(int capacity) {\n        \n        this.capacity = capacity;\n        this.mp = new HashMap();\n        \n        head = new DoublyLinkedList();\n        head.prev = null;\n        \n        tail = new DoublyLinkedList();\n        tail.next = null;\n        \n        head.next = tail;\n        tail.prev = head;\n        \n    }\n    \n    public int get(int key) {\n        \n        int value = -1;\n        \n        if (mp.containsKey(key)) {\n            \n            DoublyLinkedList node = mp.get(key);\n            moveToHead(node);\n            value = node.value;\n        }\n        \n        return value;\n    }\n    \n    public void put(int key, int value) {\n     \n        if (mp.containsKey(key)) {\n            DoublyLinkedList node = mp.get(key);\n            node.value = value;\n            moveToHead(node);\n        } else {\n            \n            DoublyLinkedList node = new DoublyLinkedList();\n            node.key = key;\n            node.value = value;\n            \n            mp.put(key, node);\n            addNode(node);\n            \n            count++;\n\n            if (count > capacity) {\n                DoublyLinkedList tail = removeFromTail();\n                mp.remove(tail.key);\n                count--;\n            }\n        }\n    }\n    \n    private void addNode(DoublyLinkedList node) {\n        node.prev = head;\n        node.next = head.next;\n        head.next.prev = node;\n        head.next = node;\n    }\n    \n    private void removeNode(DoublyLinkedList node) {\n        DoublyLinkedList next = node.next;\n        DoublyLinkedList prev = node.prev;\n        \n        prev.next = next;\n        next.prev = prev;\n    }\n    \n    private void moveToHead(DoublyLinkedList node) {\n        removeNode(node);\n        addNode(node);\n    }\n    \n    private DoublyLinkedList removeFromTail() {\n        \n        DoublyLinkedList prev = tail.prev;\n        removeNode(prev);\n        return prev;\n    }\n    \n    class DoublyLinkedList {\n    \n        int key;\n        int value;\n        DoublyLinkedList prev;\n        DoublyLinkedList next;\n    }\n}","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}