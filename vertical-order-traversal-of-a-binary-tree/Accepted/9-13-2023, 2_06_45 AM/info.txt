{"id":1047828835,"lang":"cpp","lang_name":"C++","time":"1 week, 1 day","timestamp":1694551005,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1047828835/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"12.1 MB","code":"class Solution {\npublic:\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n        map<int, vector<pair<int, int>>> verticalMap; // Map to store nodes at each vertical position.\n\n        // Use a queue for level-order traversal along with row and column positions.\n        queue<pair<TreeNode*, pair<int, int>>> q;\n        q.push({root, {0, 0}});\n\n        while (!q.empty()) {\n            int size = q.size();\n            map<int, vector<pair<int, int>>> temp; // Temporary map for this level.\n\n            // Process nodes at this level.\n            for (int i = 0; i < size; ++i) {\n                TreeNode* node = q.front().first;\n                int row = q.front().second.first;\n                int col = q.front().second.second;\n                q.pop();\n\n                temp[col].push_back({row, node->val}); // Store node's row and value.\n\n                if (node->left)\n                    q.push({node->left, {row + 1, col - 1}});\n\n                if (node->right)\n                    q.push({node->right, {row + 1, col + 1}});\n            }\n\n            // Merge the temporary map into the main vertical map.\n            for (const auto& entry : temp) {\n                vector<pair<int, int>> nodes = entry.second;\n                sort(nodes.begin(), nodes.end()); // Sort nodes in the same column by their row.\n\n                for (auto pair : nodes) {\n                    verticalMap[entry.first].push_back(pair); // Add pairs to the main map.\n                }\n            }\n        }\n\n        vector<vector<int>> result;\n\n        // Extract the vertical order traversal from the map.\n        for (const auto& entry : verticalMap) {\n            vector<int> columnValues; // To store values in the current column.\n            for (const auto& pair : entry.second) {\n                columnValues.push_back(pair.second); // Extract the values.\n            }\n            result.push_back(columnValues); // Add the column's values to the result.\n        }\n\n        return result;\n    }\n};\n","compare_result":"1111111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}