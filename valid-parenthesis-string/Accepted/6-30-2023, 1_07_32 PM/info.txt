{"id":982895650,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1688110652,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/982895650/","is_pending":"Not Pending","title":"Valid Parenthesis String","memory":"6.1 MB","code":"class Solution {\npublic:\n    bool checkValidString(string s) {\n        stack<int> open; // Stack to store indices of '(' characters\n        stack<int> star; // Stack to store indices of '*' characters\n\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == '(') {\n                open.push(i); // Push the index of '(' character to the stack\n            } else if (s[i] == '*') {\n                star.push(i); // Push the index of '*' character to the stack\n            } else {\n                if (!open.empty()) {\n                    open.pop(); // Match ')' with '(' from the stack\n                } else if (!star.empty()) {\n                    star.pop(); // Use '*' to match ')' if '(' is not available\n                } else {\n                    return false; // No valid matching for ')'\n                }\n            }\n        }\n\n        while (!open.empty()) {\n            if (star.empty()) {\n                return false; // '(' is not matched by '*' or ')'\n            } else if (open.top() < star.top()) {\n                open.pop(); // Match remaining '(' with '*' from the stack\n                star.pop();\n            } else {\n                return false; // '(' is not matched by '*' or ')'\n            }\n        }\n\n        return true; // All '(' are matched\n    }\n};\n\n// Approach :\n// Iterate through the input string s and use two stacks, open and star, \n// to keep track of the indices of opening parentheses '(' and asterisks '*' encountered.\n\n// Time Complexity : \n// The time complexity of this approach is O(n), where n is the length of the input string s. \n// This is because we iterate through s once, performing constant-time operations for each character.\n\n// Space Complexity : \n// The space complexity is O(n) as well. In the worst case, all characters in s could be opening \n// parentheses or asterisks, and both stacks open and star could contain up to n elements.","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parenthesis-string","has_notes":false,"flag_type":1}