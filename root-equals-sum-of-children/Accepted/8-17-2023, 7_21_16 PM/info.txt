{"id":1023983804,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1692280276,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1023983804/","is_pending":"Not Pending","title":"Root Equals Sum of Children","memory":"12.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    bool isSum(TreeNode* node) {\n        if (node == NULL || (node->left == NULL && node->right == NULL)) {\n            return true;\n        }\n        \n        int childrenValue = 0;\n        if (node->left != NULL) {\n            childrenValue += node->left->val;\n        }\n        if (node->right != NULL) {\n            childrenValue += node->right->val;\n        }\n        \n        return (node->val == childrenValue) && checkTree(node->left) && checkTree(node->right);\n    }\n    \npublic:\n    // Function to check whether all nodes of a tree have the value \n    // equal to the sum of their child nodes.\n    bool checkTree(TreeNode* root) {\n        return isSum(root);\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"root-equals-sum-of-children","has_notes":false,"flag_type":1}