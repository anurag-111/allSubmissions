{"id":1023968788,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1692279131,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1023968788/","is_pending":"Not Pending","title":"Root Equals Sum of Children","memory":"12.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    // This function calculates the sum of values in a tree.\n    int sum(TreeNode* node) {\n        if (node == NULL) {\n            return 0; // If the node is empty, its sum is 0.\n        }\n        \n        // If the node is not empty, add its value to the sum of its left and right children.\n        return node->val + sum(node->left) + sum(node->right);\n    }\n    \npublic:\n    // This function checks if a tree satisfies a specific condition.\n    bool checkTree(TreeNode* root) {\n        if (root == NULL) {\n            return true; // An empty tree automatically satisfies the condition.\n        }\n        \n        int rootValue = root->val; // Get the value of the root node.\n        \n        // Calculate the sum of values of the left and right children.\n        int childrenValue = sum(root->left) + sum(root->right);\n        \n        // Compare the value of the root node with the sum of its children's values.\n        // If they are equal, then the condition is satisfied, and we return true.\n        return rootValue == childrenValue;\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"root-equals-sum-of-children","has_notes":false,"flag_type":1}