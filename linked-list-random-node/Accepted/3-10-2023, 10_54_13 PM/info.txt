{"id":912803024,"lang":"cpp","lang_name":"C++","time":"6 months, 2 weeks","timestamp":1678469053,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/912803024/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"16.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\nclass Solution {\npublic:\n    vector<int>values;\n    Solution(ListNode* head) {\n        ListNode *temp = head;\n        int i = 0;\n        \n        while(temp) {\n           values.push_back(temp->val);\n           temp = temp->next;\n        }    \n    }\n\n    int getRandom() {\n        int n = values.size();\n        int i = rand() % n;  // ((N-1)/N)* 1/(N-1) = 1/N\n        return values[i];    \n    }\n};\n\n\n/*\n    i = 1, probability of selecting first node = 1/N\n\n    i = 2, probability of selecting second node = \n           [probability that first node is not selected] * \n           [probability that second node is selected]\n           = ((N-1)/N)* 1/(N-1) = 1/N\n*/\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */","compare_result":"11111111","title_slug":"linked-list-random-node","has_notes":false,"flag_type":1}