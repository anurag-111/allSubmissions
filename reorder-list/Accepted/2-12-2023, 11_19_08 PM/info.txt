{"id":896688677,"lang":"cpp","lang_name":"C++","time":"7Â months, 1Â week","timestamp":1676224148,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/896688677/","is_pending":"Not Pending","title":"Reorder List","memory":"17.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\nclass Solution {\npublic:\n    ListNode* getMiddle(ListNode* head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while(fast && fast->next){\n           slow = slow->next;\n           fast = fast->next->next;   \n        }\n        return slow;\n    }\n    ListNode* reverseList(ListNode* head) { \n        ListNode* prev = NULL;\n        ListNode* next = NULL;\n        while(head) {\n           next = head->next;\n           head->next = prev;\n           prev = head;\n           head = next; \n        }\n        return prev;\n    }\n    void reorderList(ListNode* head) {\n         ListNode* mid = getMiddle(head);\n         ListNode* reversed = reverseList(mid->next);\n         mid->next = NULL; // set next of middle element to null to avoid cyclic path\n\n         while(head && reversed){\n             ListNode* nn = head->next;     \n             ListNode* rn = reversed->next;\n             head->next = reversed;          \n             head->next->next = nn;\n             head = nn;\n             reversed = rn;\n         }\n    }\n};","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false,"flag_type":1}