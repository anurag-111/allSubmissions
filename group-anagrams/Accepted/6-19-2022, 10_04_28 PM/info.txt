{"id":726073780,"lang":"cpp","lang_name":"C++","time":"1 year, 3 months","timestamp":1655656468,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/726073780/","is_pending":"Not Pending","title":"Group Anagrams","memory":"20.7 MB","code":"class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {    \n        unordered_map<string, vector<string>> umap;\n        vector<vector<string>> groupedAnagrams;\n    \n        for (string str : strs) { // n times where n  size of input array strs\n           \n            umap[mySort(str)].push_back(str);\n            \n        }\n        \n        for (auto itr : umap) {\n            groupedAnagrams.push_back(itr.second);\n        }\n        \n        return groupedAnagrams;\n    }\n    \n    string mySort(string s) {\n        \n        int counts[26] = {0};\n        \n        for (char ch : s) {\n            counts[ch - 'a']++;\n        }\n        \n        string key = \"\";\n        for (int c = 0; c < 26; c++) {\n            if (counts[c] > 0) {\n                // key += ('a' + c);\n                // key += counts[c];\n                key += string(counts[c], ('a' + c));\n            }\n        }\n        \n        return key;\n    }\n    \n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"flag_type":1}