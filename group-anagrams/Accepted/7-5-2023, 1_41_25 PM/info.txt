{"id":986769180,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1688544685,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/986769180/","is_pending":"Not Pending","title":"Group Anagrams","memory":"21.3 MB","code":"#include <vector>\n#include <string>\n#include <unordered_map>\n\nclass Solution {\nprivate:\n    // Helper function to generate an anagram key for a given string\n    string generateAnagramKey(string& str) {\n        int characterCounts[26] = {0};\n\n        // Count the frequency of each character in the string\n        for (char ch : str) {\n            characterCounts[ch - 'a']++;\n        }\n\n        // Generate the anagram key based on the sorted counts\n        string key = \"\";\n        for (int i = 0; i < 26; i++) {\n            if (characterCounts[i] > 0) {\n                key += ('a' + i);\n                key += to_string(characterCounts[i]);\n            }\n        }\n\n        return key;\n    }\n\npublic:\n    // Function to group anagrams together\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        vector<vector<string>> anagramGroups;\n        unordered_map<string, vector<string>> anagramMap;\n\n        // Group strings by their anagram keys\n        for (string str : strs) {\n            string currentString = str;\n            string key = generateAnagramKey(currentString);\n            anagramMap[key].push_back(currentString);\n        }\n\n        // Collect the groups of anagrams\n        for (auto group : anagramMap) {\n            anagramGroups.push_back(group.second);\n        }\n\n        return anagramGroups;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"flag_type":1}