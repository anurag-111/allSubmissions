{"id":959488158,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1685352155,"status":10,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/959488158/","is_pending":"Not Pending","title":"Design HashSet","memory":"50.1 MB","code":"class MyHashSet {\nprivate: \n    int prime;\n    vector<list<int>> table;\n    int hashValue;\n\n    // Hashes the key using modulo division\n    void createHash(int key) {\n        hashValue = key % prime;\n    }\n\n    // Searches for the key in the list at the hash index\n    auto search(int key) {\n        return find(table[hashValue].begin(), table[hashValue].end(), key);\n    }\n\npublic:\n    MyHashSet() {\n        prime = 10007;\n        table.resize(prime);\n    }\n    \n    // Adds the key to the set if it is not already present\n    void add(int key) {\n        createHash(key);\n        if (!contains(key)) {\n            table[hashValue].push_back(key);\n        }\n    }\n    \n    // Removes the key from the set if it exists\n    void remove(int key) {\n        createHash(key);\n        auto itr = search(key);\n        if (itr != table[hashValue].end()) {\n            table[hashValue].erase(itr);\n        }\n    }\n    \n    // Checks if the set contains the key\n    bool contains(int key) {\n        createHash(key);\n        return search(key) != table[hashValue].end();\n    }\n};\n\n/**\n * Usage:\n * MyHashSet* obj = new MyHashSet();\n * obj->add(key);\n * obj->remove(key);\n * bool param_3 = obj->contains(key);\n */\n\n","compare_result":"111111111111111111111111111111111","title_slug":"design-hashset","has_notes":false,"flag_type":1}