{"id":1021361480,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1692036632,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1021361480/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"15.4 MB","code":"// https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    \n    void findParent(TreeNode *root, TreeNode *parent, unordered_map<TreeNode*,TreeNode*>&mp){\n        \n        if(!root) return;\n        \n        mp[root] = parent;\n        findParent(root->left,root,mp);\n        findParent(root->right,root,mp);\n    }\n    \n    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {\n        vector<int> result;\n        if(!root) result;\n        \n        unordered_map<TreeNode*, TreeNode*>mp;\n        \n        findParent(root,NULL,mp);\n        \n        queue<pair<TreeNode*,int>>q;\n        q.push({target, 0});\n\n        unordered_set<TreeNode*> visited;\n        \n        while(!q.empty()){\n            \n            pair<TreeNode*, int> p = q.front();\n            q.pop();\n            \n            TreeNode * cur = p.first;\n            int dist = p.second;\n            \n            visited.insert(cur);\n            \n            if(dist == K)\n                result.push_back(cur->val);\n\n            if(cur->left && visited.count(cur->left)==0)\n                q.push({cur->left, dist + 1});\n\n            if(cur->right && visited.count(cur->right)==0)\n                q.push({cur->right, dist + 1});\n\n            if(mp[cur]!=NULL  && visited.count(mp[cur])==0)\n                q.push({mp[cur], dist + 1});\n            \n        }\n         return result;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false,"flag_type":1}