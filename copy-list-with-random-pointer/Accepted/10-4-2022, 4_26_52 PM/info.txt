{"id":814935918,"lang":"cpp","lang_name":"C++","time":"11 months, 3 weeks","timestamp":1664881012,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/814935918/","is_pending":"Not Pending","title":"Copy List with Random Pointer","memory":"11.2 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n    \n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\n  public:\n    Node * copyRandomList(Node * head) {\n     \n      //Pass 1 : Creating a copy (except random pointer) of each old node\n      // and insert it next to the old node it's copied from.\n      \n      Node * node = head;\n      while (node) {\n        Node* temp = node->next;\n        node->next = new Node(node->val);\n        node->next->next = temp;\n        node = temp;\n      }\n\n      //Pass 2 : Now copy the random pointer (if exists) of the old\n      //nodes to their copy of new nodes.\n      \n      node = head;\n      while (node) {\n        if (node->random) {\n          node->next->random = node->random->next;\n        }\n        node = node->next->next;\n      }\n\n      //Pass 3 : Copy the alternative nodes into \"ans\" link list using\n      //\"helper\" pointer along with restoring the old link list.\n      \n      Node* ans = new Node(0);\n      Node* helper = ans;\n        \n      while (head) {\n        helper->next = head->next;\n        helper = helper->next;\n        head->next = head->next->next;\n        head = head->next;\n      }\n      \n      return ans->next;\n    }\n};","compare_result":"1111111111111111111","title_slug":"copy-list-with-random-pointer","has_notes":false,"flag_type":1}