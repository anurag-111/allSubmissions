{"id":989232386,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1688814329,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/989232386/","is_pending":"Not Pending","title":"Max Consecutive Ones III","memory":"55.5 MB","code":"class Solution {\npublic:\n    /**\n     * Function to find the length of the longest subarray with at most k zeros\n     * @param nums: Input array of integers\n     * @param k: Maximum number of zeros allowed\n     * @return Length of the longest subarray\n     */\n    int longestOnes(vector<int>& nums, int k) {\n        int left = 0;           // Left pointer for the sliding window\n        int zerosCount = 0;     // Count of zeros in the current window\n        int right = 0;          // Right pointer for the sliding window\n        int longestLength = 0;  // Length of the longest subarray with at most k zeros\n        int size = nums.size(); // Size of the input array\n\n        while (right < size) {\n            if (nums[right] == 0) {\n                zerosCount++;\n            }\n\n            // Shrink the window from the left until the zeros count is within the limit\n            while (zerosCount > k) {\n                if (nums[left] == 0) {\n                    zerosCount--;\n                }\n                left++;\n            }\n\n            // Update the longest length if the current window length is greater\n            longestLength = max(longestLength, right - left + 1);\n            right++;\n        }\n\n        return longestLength;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"max-consecutive-ones-iii","has_notes":false,"flag_type":1}