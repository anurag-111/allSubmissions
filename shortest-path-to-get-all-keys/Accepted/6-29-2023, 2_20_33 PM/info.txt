{"id":982211203,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1688028633,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/982211203/","is_pending":"Not Pending","title":"Shortest Path to Get All Keys","memory":"51.6 MB","code":"class Solution {\n    class State {\n        int keys, i, j;\n        State(int keys, int i, int j) {\n            this.keys = keys;\n            this.i = i;\n            this.j = j;\n        }\n    }\n    public int shortestPathAllKeys(String[] grid) {\n        int x = -1, y = -1, m = grid.length, n = grid[0].length(), max = -1;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                char c = grid[i].charAt(j);\n                if (c == '@') {\n                    x = i;\n                    y = j;\n                }\n                if (c >= 'a' && c <= 'f') {\n                    max = Math.max(c - 'a' + 1, max);\n                }\n            }\n        }\n        State start = new State(0, x, y);\n        Queue<State> q = new LinkedList<>();\n        Set<String> visited = new HashSet<>();\n        visited.add(0 + \" \" + x + \" \" + y);\n        q.offer(start);\n        int[][] dirs = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        int step = 0;\n        while (!q.isEmpty()) {\n            int size = q.size();\n            while (size-- > 0) {\n                State cur = q.poll();\n                if (cur.keys == (1 << max) - 1) {\n                    return step;\n                }\n                for (int[] dir : dirs) {\n                    int i = cur.i + dir[0];\n                    int j = cur.j + dir[1];\n                    int keys = cur.keys;\n                    if (i >= 0 && i < m && j >= 0 && j < n) {\n                        char c = grid[i].charAt(j);\n                        if (c == '#') {\n                            continue;\n                        }\n                        if (c >= 'a' && c <= 'f') {\n                            keys |= 1 << (c - 'a');\n                        }\n                        if (c >= 'A' && c <= 'F' && ((keys >> (c - 'A')) & 1) == 0) {\n                            continue;\n                        }\n                        if (!visited.contains(keys + \" \" + i + \" \" + j)) {\n                            visited.add(keys + \" \" + i + \" \" + j);\n                            q.offer(new State(keys, i, j));\n                        }\n                    }\n                }\n            }\n            step++;\n        }\n        return -1;\n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"shortest-path-to-get-all-keys","has_notes":false,"flag_type":1}