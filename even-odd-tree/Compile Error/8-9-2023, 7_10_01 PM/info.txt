{"id":1016615217,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1691588401,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1016615217/","is_pending":"Not Pending","title":"Even Odd Tree","memory":"N/A","code":"// Store this code\n// C++ code for Minimize changes to convert into Tree with root 1, even left\n// children and odd right children\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n// To store the final changes needed\nint changes;\n\nstruct Node {\n\tint value;\n\tstruct Node *left, *right;\n};\n\n// Utility function to create new\n// tree node\nNode* newNode(int data) {\n\tNode* temp = new Node;\n\ttemp->value = data;\n\ttemp->left = temp->right = NULL;\n\treturn temp;\n}\n\n// Conditions :\n// The root node is always 1.\n// Every left child of a node is always even.\n// Every right child of a node is always odd. \n\nvoid helper(Node *root) {\n    if(root == NULL) {\n        return;\n    }\n    \n    if(root->left && (root->left->value % 2) != 0) {\n        changes++;\n        root->left->value -= 1;\n    }\n    \n    if(root->right && (root->right->value % 2) == 0) {\n        changes++;\n        root->left->value -= 1;\n    }\n    \n    helper(root->left);\n    helper(root->right);\n}\n\nint minCount(Node *root) {\n    changes = 0;\n    \n    if(root == NULL) {\n        return changes;\n    }\n    \n    if(root->value != 1) {\n        changes += root -> value - 1;\n        root -> value = 1;\n    }\n    \n    helper(root);\n    return changes;\n}\n\n\n\n\n// Driver Code\nint main()\n{\n\n\t// Taking input\n\tNode* root = newNode(1);\n\troot->left = newNode(2);\n\troot->right = newNode(2);\n\troot->left->left = newNode(5);\n\troot->right->left = newNode(6);\n\troot->right->right = newNode(8);\n\n\t// Function call\n\tcout << minCount(root) << endl;\n\n\treturn 0;\n}","compare_result":null,"title_slug":"even-odd-tree","has_notes":false,"flag_type":1}