{"id":962496992,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1685728188,"status":10,"status_display":"Accepted","runtime":"202 ms","url":"/submissions/detail/962496992/","is_pending":"Not Pending","title":"Detonate the Maximum Bombs","memory":"14.8 MB","code":"#define ll long long int\n\nclass Solution {\npublic:\n    // Depth First Search (DFS) to traverse the graph and count the number of nodes\n    void dfs(vector<vector<int>>& graph, vector<bool>& visited, int& count, int& node) {\n        visited[node] = true;  // Mark the current node as visited\n        count++;  // Increment the count of nodes visited\n\n        // Traverse all the neighbors of the current node\n        for (int j = 0; j < graph[node].size(); j++) {\n            int neighbor = graph[node][j];\n            if (!visited[neighbor]) {\n                // Recursive call to visit the unvisited neighbors\n                dfs(graph, visited, count, neighbor);\n            }\n        }\n    }\n\n    int maximumDetonation(vector<vector<int>>& bombs) {\n        int n = bombs.size();  // Number of bombs\n\n        // Create an adjacency list to represent the graph\n        vector<vector<int>> graph(n);\n        for (int i = 0; i < n; i++) {\n            ll x1, y1, r1;\n            x1 = bombs[i][0];\n            y1 = bombs[i][1];\n            r1 = bombs[i][2];\n\n            // Check if other bombs are within the range of explosion\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    ll x, y;\n                    x = abs(x1 - bombs[j][0]);\n                    y = abs(y1 - bombs[j][1]);\n\n                    // If the distance is within the explosion radius, add it to the adjacency list\n                    if (x * x + y * y <= r1 * r1) {\n                        graph[i].push_back(j);\n                    }\n                }\n            }\n        }\n\n        int maxDetonation = INT_MIN;  // Maximum detonation count\n\n        // Perform DFS on each bomb to find the maximum detonation count\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            vector<bool> visited(n, false);  // Keep track of visited nodes during DFS\n            dfs(graph, visited, count, i);\n            maxDetonation = max(maxDetonation, count);\n        }\n\n        return maxDetonation;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"detonate-the-maximum-bombs","has_notes":false,"flag_type":1}