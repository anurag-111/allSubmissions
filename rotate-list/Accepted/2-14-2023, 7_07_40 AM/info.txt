{"id":897547012,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1676338660,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/897547012/","is_pending":"Not Pending","title":"Rotate List","memory":"11.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        // edge cases\n        if (!head || !head->next || k == 0) {\n            return head;\n        }\n\n        // calculate the length of the linked list\n        ListNode *cur = head;\n        int len = 1;\n        while (cur->next) {\n            cur = cur->next;\n            len++;\n        }\n\n        // reaching the end\n        cur->next = head;   \n        k = k % len;\n        k = len - k;\n        while (k--) {\n            cur = cur->next;\n        }\n\n        // updating the head and removing the link\n        head = cur->next;\n        cur->next = NULL;\n        \n        return head;\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1}