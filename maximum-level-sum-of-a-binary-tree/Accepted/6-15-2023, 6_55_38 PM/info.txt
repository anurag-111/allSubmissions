{"id":971899007,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1686835538,"status":10,"status_display":"Accepted","runtime":"199 ms","url":"/submissions/detail/971899007/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"107.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n\nclass Solution {\npublic:\n    int maxLevelSum(TreeNode* root) {\n        int maxLevel = -1;                      // Stores the level with the maximum sum\n        int currentLevel = 0;                   // Tracks the current level\n        int maxSum = INT_MIN;                   // Stores the maximum sum found\n        queue<TreeNode*> nodeQueue;             // Queue to perform level order traversal\n\n        nodeQueue.push(root);                   // Start with the root node\n\n        while (!nodeQueue.empty()) {\n            currentLevel++;                      // Move to the next level\n            int levelSize = nodeQueue.size();    // Get the number of nodes at the current level\n            int currentLevelSum = 0;             // Stores the sum of node values at the current level\n\n            // Iterate through all nodes at the current level\n            for (int i = 0; i < levelSize; i++) {\n                TreeNode* currentNode = nodeQueue.front();\n                nodeQueue.pop();\n\n                currentLevelSum += currentNode->val;     // Accumulate the node values\n\n                // Add the children of the current node to the queue\n                if (currentNode->left) {\n                    nodeQueue.push(currentNode->left);\n                }\n                    \n                if (currentNode->right) {\n                    nodeQueue.push(currentNode->right);\n                }\n            }\n\n            // Check if the sum at the current level is greater than the maximum sum.\n            // If so, update the maxSum and maxLevel accordingly\n            if (currentLevelSum > maxSum) {\n                maxLevel = currentLevel;\n                maxSum = currentLevelSum;\n            }\n        }\n\n        return maxLevel;                         // Return the level with the maximum sum\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree","has_notes":false,"flag_type":1}