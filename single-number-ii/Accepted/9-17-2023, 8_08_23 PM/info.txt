{"id":1051844805,"lang":"cpp","lang_name":"C++","time":"3 days, 21 hours","timestamp":1694961503,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1051844805/","is_pending":"Not Pending","title":"Single Number II","memory":"9.8 MB","code":"// Approach 1 : Using hashmap\n// TC : O(N)\n// SC : O(N)\n// class Solution {\n// public:\n//     int singleNumber(vector<int>& nums) {\n//         unordered_map <int, int> freqMap;\n//         for(int i = 0; i < nums.size(); i++) {\n//             freqMap[nums[i]]++;\n//         }\n\n//         int result;\n//         for(auto num : freqMap) {\n//             if(num.second == 1) {\n//                 result = num.first;\n//             }\n//         }\n//         return result;\n//     }\n// };\n\n// Approach 2 : Using bit manipulation\n// TC : O(32 * N)\n// SC : O(1)\n// class Solution {\n//   public:\n//       int singleNumber(vector<int>& nums) {\n//         int result = 0;\n//         // Each number is represented by 32 bits, hence the traversal\n//         for(int i = 0; i < 32; i++) {\n//           int sum = 0;\n//           for(int j = 0; j < nums.size(); j++) {\n//             if(((nums[j] >> i) & 1) == 1) {\n//               sum++;\n//             }\n//           } \n//           sum = sum % 3;\n//           if(sum != 0) {\n//             result = result | (sum << i);\n//           }          \n//         } \n//         return result;               \n//       }\n// };\n\n// Approach 3 : Using optimized Bit Manipulation\n// TC : O(N)\n// SC : O(1)\n  class Solution {\n  public:\n      int singleNumber(vector<int>& nums) {\n        int ones = 0;\n        int twos = 0;\n        for(int i = 0; i < nums.size(); i++) {\n          ones = (ones ^ nums[i]) & ~(twos);\n          twos = (twos ^ nums[i]) & ~(ones);\n        }                \n        return ones;\n      }\n};\n\n","compare_result":"11111111111111","title_slug":"single-number-ii","has_notes":false,"flag_type":1}