{"id":1036905785,"lang":"cpp","lang_name":"C++","time":"2 weeks, 6 days","timestamp":1693495710,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1036905785/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"20.1 MB","code":"class Solution {\nprivate: \n    int calculateDiameter(TreeNode *root, int &diameter) {\n        // Base Case: If the node is NULL, return 0.\n        if (root == NULL) {\n            return 0;\n        }\n\n        // Recursive calls to calculate heights of left and right subtrees.\n        int leftHeight = calculateDiameter(root->left, diameter);\n        int rightHeight = calculateDiameter(root->right, diameter);\n\n        // The height of the current node\n        int height = 1 + max(leftHeight, rightHeight);\n\n        // The current diameter passing through the current node\n        int currentDiameter = leftHeight + rightHeight;\n\n        // Update the overall maximum diameter found so far\n        diameter = max(diameter, currentDiameter);\n\n        // Return the height of the current node\n        return height;\n    }\n\npublic:\n    int diameterOfBinaryTree(TreeNode *root) {\n        int diameter = 0;\n        calculateDiameter(root, diameter);\n        return diameter;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}