{"id":1010285904,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1690982852,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1010285904/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"20.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nclass Solution {\nprivate:\n    int diameter; // Variable to store the diameter of the binary tree.\n\n    // Helper function to calculate the maximum depth of each subtree rooted at the given node.\n    int calculateMaxDepth(TreeNode* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n\n        // Recursively calculate the maximum depth of the left and right subtrees.\n        int leftDepth = calculateMaxDepth(root->left);\n        int rightDepth = calculateMaxDepth(root->right);\n\n        // Update the diameter if the current path is longer.\n        diameter = max(diameter, (leftDepth + rightDepth));\n\n        // Return the maximum depth of the subtree rooted at the current node.\n        return 1 + max(leftDepth, rightDepth);\n    }\n\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        diameter = 0; // Initialize the diameter to 0 before the calculation.\n        calculateMaxDepth(root); // Start the recursive traversal to calculate the max depth.\n        return diameter; // Return the final diameter of the binary tree.\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}