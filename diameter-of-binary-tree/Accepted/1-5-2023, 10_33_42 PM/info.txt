{"id":872062212,"lang":"cpp","lang_name":"C++","time":"8 months, 2 weeks","timestamp":1672938222,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/872062212/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"20.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        int diameter = 0;\n        calculate(root, diameter);\n        return diameter;\n    }\nprivate:\n    int calculate(TreeNode* root, int& diameter) {\n        if (!root) {\n            return 0;\n        }\n        \n        int left_height = calculate(root->left, diameter);\n        int right_height = calculate(root->right, diameter);\n        \n        diameter = max(diameter, (left_height + right_height));\n        return max(left_height, right_height) + 1;\n    }\n};\n\n//TC : O(n)\n//SC : O(n)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}