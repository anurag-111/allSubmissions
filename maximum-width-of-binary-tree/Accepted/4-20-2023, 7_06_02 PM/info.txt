{"id":936914690,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1681997762,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/936914690/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"17.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        \n        queue<pair<TreeNode*, int>>q;\n        q.push({root, 0});\n        int maxWidth = INT_MIN;\n\n        while(!q.empty()){\n            int start = q.front().second;\n            int end = q.back().second;\n            \n            maxWidth = max(maxWidth, end - start + 1);\n            \n            int count = q.size();\n            \n            while(count--){\n                int idx = q.front().second - end;\n                \n                TreeNode* node = q.front().first;\n                q.pop();\n                \n                if(node->left) {\n                    q.push({node->left, 2 * idx + 1});\n                }\n                    \n                if(node->right) {\n                    q.push({node->right, 2 * idx + 2});\n                }\n            }\n        }\n        \n        return maxWidth;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}