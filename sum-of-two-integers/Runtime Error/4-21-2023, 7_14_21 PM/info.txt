{"id":937432818,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1682084661,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/937432818/","is_pending":"Not Pending","title":"Sum of Two Integers","memory":"N/A","code":"class Solution {\npublic:\n    int getSum(int a, int b) {\n        while(b) {\n            int carry = (a & b) << 1;\n            a = a ^ b;\n            b = carry;\n        }\n        return a;\n    }\n};\n\n/*\n    Explaination :\n    \n    Inside the loop, the function calculates the carry by performing \n    bitwise AND operation between \"a\" and \"b\", and then left shifting \n    the result by 1 to the left.\n\n    The function calculates the sum of \"a\" and \"b\" without considering \n    the carry by performing bitwise XOR operation between \"a\" and \"b\".\n\n    The function updates \"a\" with the calculated sum and \"b\" with the \n    calculated carry for the next iteration.\n\n    The loop continues until there is no carry left (i.e., \"b\" becomes 0).\n\n    Finally, the function returns the calculated sum of \"a\" and \"b\" as the result.\n*/\n\n/*\n    Complexity :\n    \n    Bit manipulation is used to simulate addition without using the \"+\" \n    or \"-\" operators, and has a time complexity of O(1) as it takes constant time \n    to perform bitwise operations. \n\n    The space complexity of the function is also O(1) as it uses a constant amount \n    of memory to store the variables \"a\", \"b\", and \"carry\".\n*/","compare_result":"11111111000000000000000000","title_slug":"sum-of-two-integers","has_notes":false,"flag_type":1}