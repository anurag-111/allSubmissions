{"id":968251640,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1686418250,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/968251640/","is_pending":"Not Pending","title":"Maximum Value at a Given Index in a Bounded Array","memory":"N/A","code":"class Solution {\npublic:\n    int maxValue(int length, int targetIndex, int maxSum) {\n        maxSum -= length;\n\n        int left = 0, right = maxSum, mid;\n\n        while (left < right) {\n            mid = (left + right + 1) / 2;\n\n            if (calculateSum(length, targetIndex, mid) <= maxSum)\n                left = mid;\n            else\n                right = mid - 1;\n        }\n\n        return left + 1;\n    }\n\n    long calculateSum(int length, int targetIndex, int value) {\n        int leftBoundary = max(value - targetIndex, 0);\n        int rightBoundary = max(value - (length - 1 - targetIndex), 0);\n        int totalElements = length - 1;\n\n        long sum = (long)value * (value + 1) / 2; // Sum of elements up to 'value'\n        sum -= (long)leftBoundary * (leftBoundary + 1) / 2; // Subtract the elements on the left side of targetIndex\n        sum -= (long)rightBoundary * (rightBoundary + 1) / 2; // Subtract the elements on the right side of targetIndex\n        sum += leftBoundary + rightBoundary; // Add back the value of the boundaries\n\n        return sum;\n    }\n};\n","compare_result":"1100011110100000001000000011010000010101000010000000000000000010000010000000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000","title_slug":"maximum-value-at-a-given-index-in-a-bounded-array","has_notes":false,"flag_type":1}