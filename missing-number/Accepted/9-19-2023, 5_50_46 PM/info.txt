{"id":1053536709,"lang":"cpp","lang_name":"C++","time":"1 day, 23 hours","timestamp":1695126046,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1053536709/","is_pending":"Not Pending","title":"Missing Number","memory":"18.4 MB","code":"// Approach 1 : Binary Search\n// Time Complexity : O(N log N)\n// Space Complexity : O(1)\n// class Solution {\n// public:\n//     int missingNumber(vector<int>& nums) {\n//         int left = 0;\n//         int right = nums.size() - 1;\n//         sort(nums.begin(), nums.end());\n//         while(left <= right) {\n//             int mid = (left + right) / 2;\n//             if(nums[mid] > mid) {\n//                 right = mid - 1;\n//             } else {\n//                 left = mid + 1;\n//             }\n//         } \n//         return left;          \n//     }\n// };\n\n// Approach 2 : Bit Manipulation\n// Time Complexity : O(N)\n// Space Complexity : O(1)\n\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int size = nums.size();\n        int result = size;\n        for(int i = 0; i < size; i++) {\n            result = result ^ (i ^ nums[i]);\n        }\n        return result;\n    }\n};\n\n\n// [3, 0, 1]       \n// size = 3\n// result = 011\n// i = 0\n// result = 011 ^ (000 ^ 011) = 011 ^ 011 = 000\n// i = 1\n// result = 000 ^ (001 ^ 000) = 000 ^ 001 = 001\n// i = 2\n// result = 001 ^ (010 ^ 001) = 001 ^ 011 = 010 -> 2\n// missing number  = 2","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"missing-number","has_notes":false,"flag_type":1}