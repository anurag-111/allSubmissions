{"id":870432831,"lang":"cpp","lang_name":"C++","time":"8 months, 2 weeks","timestamp":1672749991,"status":10,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/870432831/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"13.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    struct compare {\n        bool operator()(const ListNode* first, const ListNode* second) {\n            return first->val > second->val;\n        }\n    };\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n        priority_queue<ListNode*, vector<ListNode*>, compare> minHeap;\n        \n        for (ListNode* head : lists) {\n            if (head != NULL) {\n                minHeap.push(head);\n            }\n        }\n        \n        ListNode* dummy = new ListNode();\n        // result list, intially empty\n        ListNode* temp = dummy;\n        \n        while(!minHeap.empty()) {\n            \n            // remove the minimum element from the minHeap\n            ListNode* current = minHeap.top();\n            minHeap.pop();\n            //attach current node after temp\n            temp->next = current;\n            //increment temp pointer\n            temp = temp->next;\n            // if current, then add the next element in the current list to minheap\n            if (current->next != NULL) {\n                minHeap.push(current->next);\n            }\n        }\n        \n        return dummy->next;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}