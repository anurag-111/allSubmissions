{"id":892052924,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1675607178,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/892052924/","is_pending":"Not Pending","title":"Permutations","memory":"42.4 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<Integer> permutation = new ArrayList<>();\n        List<List<Integer>> result = new ArrayList<>();\n        boolean[] used = new boolean[nums.length];      //To make sure each element is used once, we establish boolean[] used.\n\n        findPermutation(nums, permutation, result, used);\n\n        return result;\n    }\n\n    private void findPermutation(int[] nums, List<Integer> permutation, List<List<Integer>> result, boolean[] used) {\n        if (permutation.size() == nums.length) {        // If we exhausted the current branch, currResult.size() == nums.length, we will backtrack.\n            result.add(new ArrayList<>(permutation));\n            return;\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n            if (used[i] == true) {                     \n                continue;\n            }\n            used[i] = true;\n            permutation.add(nums[i]);\n            findPermutation(nums, permutation, result, used);\n            permutation.remove(permutation.size() - 1);\n            used[i] = false;\n        }\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}