{"id":875605832,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1673372765,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/875605832/","is_pending":"Not Pending","title":"Word Pattern","memory":"40.1 MB","code":"class Solution {\n    public boolean wordPattern(String pattern, String str) {\n        String[] words = str.split(\" \");\n\n        if(words.length != pattern.length()){\n            return false;\n        }\n\n        //pattern's character gets mapped with word\n        HashMap<Character, String> map = new HashMap<>();\n        //usage of the word\n        HashMap<String, Boolean> used = new HashMap<>();\n\n        for (int i = 0; i < pattern.length(); i++) {\n            char ch = pattern.charAt(i);\n\n            if (map.containsKey(ch) == false) {             // is the character mapped or not\n                if (used.containsKey(words[i]) == true) {   // if the word to be mapped is already present\n                    return false;\n                } else {\n                    used.put(words[i], true);               // now the word will be mapped to the character\n                    map.put(ch, words[i]);\n                }\n            } else {\n                String mapped_with = map.get(ch);           // if the character is present then find out what it is mapped with\n                if(mapped_with.equals(words[i]) == false) { // if the character is mapped with some other word\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111","title_slug":"word-pattern","has_notes":false,"flag_type":1}