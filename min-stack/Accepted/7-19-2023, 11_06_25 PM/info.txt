{"id":998665612,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689788185,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/998665612/","is_pending":"Not Pending","title":"Min Stack","memory":"16.1 MB","code":"class MinStack {\npublic:\n\n    stack<int> st1;\n    stack<int> st2;\n\n    MinStack() {\n    }\n    \n    void push(int val) {\n        st1.push(val); // Push the element onto the main stack 'st1'.\n\n        // If the auxiliary stack 'st2' is empty or the top element of 'st2' is greater than or equal to the new value,\n        // then push the new value onto 'st2', making it the new minimum element.\n        if(st2.empty() || st2.top() >= val) {\n            st2.push(val);\n        }\n    }\n    \n    void pop() {\n        // If the top element of the main stack 'st1' is equal to the top element of the auxiliary stack 'st2',\n        // then it means the minimum element is being removed, so we also pop it from 'st2'.\n        if(st1.top() == st2.top()) {\n            st2.pop();\n        }\n\n        st1.pop(); // Always pop the top element from the main stack 'st1'.\n    }\n    \n    int top() {\n        return st1.top();\n    }\n    \n    int getMin() {\n        return st2.top();\n    }\n};\n\n// Time complexity of all operations is O(1), and the space complexity is O(N)\n\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"flag_type":1}