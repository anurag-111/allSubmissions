{"id":981520728,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1687947040,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/981520728/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"N/A","code":"class Solution {\npublic:\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        // Create a graph using adjacency list representation\n        vector<vector<pair<int, double>>> graph(n);  // Graph to store edges and probabilities\n        \n        // Build the graph using given edges and success probabilities\n        for (int i = 0; i < edges.size(); i++) {\n            vector<int> edge = edges[i];\n            int u = edge[0];\n            int v = edge[1];\n            double p = succProb[i];\n            graph[u].push_back({v, p});\n            graph[v].push_back({u, p});\n        }\n        \n        // Perform Dijkstra's algorithm using priority queue\n        priority_queue<pair<double, int>> pq;  // Priority queue to store probabilities and nodes\n        pq.push({1.0, start});  // Start node with probability 1.0\n        \n        vector<bool> visited(n, false);  // Track visited nodes\n        \n        while (!pq.empty()) {\n            auto [prob, pos] = pq.top();\n            pq.pop();\n            \n            if (pos == end)\n                return prob;  // Reached the end node, return the maximum probability\n            \n            if (visited[pos])\n                continue;  // Skip if the node has already been visited\n            \n            visited[pos] = false;\n            \n            // Explore neighbors and update probabilities\n            for (auto [next, p] : graph[pos]) {\n                pq.push({prob * p, next});\n            }\n        }\n        \n        return 0;  // Unable to reach the end node, return 0 as the maximum probability\n    }\n};\n","compare_result":"110000000000000000","title_slug":"path-with-maximum-probability","has_notes":false,"flag_type":1}