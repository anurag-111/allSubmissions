{"id":958461135,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1685205220,"status":10,"status_display":"Accepted","runtime":"291 ms","url":"/submissions/detail/958461135/","is_pending":"Not Pending","title":"Stone Game III","memory":"137.9 MB","code":"class Solution {\npublic:\n    string stoneGameIII(vector<int>& stoneValue) {\n        int n = stoneValue.size();\n        vector<int> suffixSum(n+1, 0); // Stores the suffix sum of stone values\n        vector<int> dp(n+1, 0); // Stores the maximum score difference for each position\n\n        // Calculate suffix sum\n        for (int i = n - 1; i >= 0; i--)\n            suffixSum[i] = suffixSum[i + 1] + stoneValue[i];\n\n        // Calculate maximum score difference using dynamic programming\n        for (int i = n-1; i >= 0; i--) {\n            dp[i] = stoneValue[i] + suffixSum[i+1] - dp[i+1]; // Option 1: Take the current stone and subtract the opponent's best score\n\n            // Check options 2 and 3: Take 2 or 3 stones and subtract the opponent's best score\n            for (int k = i+1; k < i+3 && k < n; k++) {\n                dp[i] = max(dp[i], suffixSum[i] - dp[k+1]);\n            }\n        }\n\n        // Compare the scores and determine the winner\n        if (dp[0]*2 == suffixSum[0])\n            return \"Tie\";\n        else if (dp[0]*2 > suffixSum[0])\n            return \"Alice\";\n        else\n            return \"Bob\";\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-iii","has_notes":false,"flag_type":1}