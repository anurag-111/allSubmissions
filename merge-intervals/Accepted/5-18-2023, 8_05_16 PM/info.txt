{"id":952765756,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1684420516,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/952765756/","is_pending":"Not Pending","title":"Merge Intervals","memory":"21.5 MB","code":"class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        \n        vector<vector<int>> merged; // Vector to store the merged intervals\n        sort(intervals.begin(), intervals.end()); // Sort the intervals based on the starting point\n        \n        merged.push_back(intervals[0]); // Add the first interval to the merged vector\n        \n        for (int i = 1; i < intervals.size(); i++) {\n            \n            vector<int> current = intervals[i]; // Current interval being processed\n            vector<int> last = merged.back(); // Last merged interval\n            \n            if (current[0] <= last[1]) {\n                // Case: Overlapping intervals, update the ending point of the last interval\n                last[1] = max(current[1], last[1]); // Update the ending point to the maximum of current and last interval's ending point\n                merged.pop_back(); // Remove the last interval from merged vector\n                merged.push_back(last); // Add the updated interval back to the merged vector\n            } else {\n                // Case: Non-overlapping intervals, add the current interval to the merged vector\n                merged.push_back(current);\n            }\n        }\n        \n        return merged; // Return the merged intervals\n        \n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}