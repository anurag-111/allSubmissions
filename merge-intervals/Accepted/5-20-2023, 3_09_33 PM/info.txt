{"id":953820795,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1684575573,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/953820795/","is_pending":"Not Pending","title":"Merge Intervals","memory":"19 MB","code":"class Solution {\n    public :\n        vector<vector<int>> merge(vector<vector<int>> &intervals) {\n            if(intervals.empty()) {\n                return {};\n            }\n\n            // Sorting in increasing order of the starting time of an interval\n            sort(intervals.begin(), intervals.end());\n\n            // Creating a result vector\n            vector<vector<int>> result;\n\n            // Inserting the first interval\n            result.push_back(intervals[0]);\n            int j = 0;\n            \n            // Iterating over the intervals\n            for(int i = 0; i < intervals.size(); i++) {\n               \n                // Overlapping occurs\n                if(result[j][1] >= intervals[i][0]) {\n                    result[j][1] = max(result[j][1], intervals[i][1]);\n                } \n               \n                // Else they are not overlapping\n                else {\n                    j++;\n                    result.push_back(intervals[i]);\n                }\n            }\n\n            return result;\n        }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}