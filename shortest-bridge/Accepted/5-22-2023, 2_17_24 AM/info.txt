{"id":954721022,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1684702044,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/954721022/","is_pending":"Not Pending","title":"Shortest Bridge","memory":"22.3 MB","code":"class Solution {\npublic:\n    const int directions[5] = {0, 1, 0, -1, 0};\n\n    void paint(vector<vector<int>>& grid, int i, int j, vector<pair<int, int>>& queue) {\n        if (min(i, j) >= 0 && max(i, j) < grid.size() && grid[i][j] == 1) {\n            grid[i][j] = 2;\n            queue.push_back({i, j});\n            for (int d = 0; d < 4; ++d) {\n                paint(grid, i + directions[d], j + directions[d + 1], queue);\n            }\n        }\n    }\n\n    int shortestBridge(vector<vector<int>>& grid) {\n        vector<pair<int, int>> queue;\n        for (int i = 0; queue.size() == 0 && i < grid.size(); ++i) {\n            for (int j = 0; queue.size() == 0 && j < grid[0].size(); ++j) {\n                paint(grid, i, j, queue);\n            }\n        }\n        while (!queue.empty()) {\n            vector<pair<int, int>> newQueue;\n            for (auto [i, j] : queue) {\n                for (int d = 0; d < 4; ++d) {\n                    int x = i + directions[d];\n                    int y = j + directions[d + 1];\n                    if (min(x, y) >= 0 && max(x, y) < grid.size()) {\n                        if (grid[x][y] == 1) {\n                            return grid[i][j] - 2;\n                        }\n                        if (grid[x][y] == 0) {\n                            grid[x][y] = grid[i][j] + 1;\n                            newQueue.push_back({x, y});\n                        }\n                    }\n                }\n            }\n            swap(queue, newQueue);\n        }\n        return 0;\n    }\n\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-bridge","has_notes":false,"flag_type":1}