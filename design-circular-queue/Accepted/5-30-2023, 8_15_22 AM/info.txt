{"id":959952943,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1685414722,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/959952943/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"16.8 MB","code":"class MyCircularQueue {\nprivate:\n    int size;       // Maximum size of the circular queue\n    int front;      // Index of the front element\n    int rear;       // Index of the rear element\n    int* queue;     // Array to store the queue elements\n\npublic:\n    MyCircularQueue(int k) {\n        front = -1;\n        rear = -1;\n        size = k;\n        queue = new int[size];\n    }\n\n    bool enQueue(int value) {\n        if (isFull()) {\n            return false;   // Queue is full, unable to enqueue\n        }\n\n        rear = (rear + 1) % size;\n\n        // Handle the case when the queue is initially empty\n        if (front == -1) {\n            front = (front + 1) % size;\n        }\n\n        queue[rear] = value;\n        return true;\n    }\n\n    bool deQueue() {\n        if (isEmpty()) {\n            return false;   // Queue is empty, unable to dequeue\n        }\n\n        if (front == rear) {\n            front = -1;\n            rear = -1;\n            return true;\n        }\n\n        front = (front + 1) % size;\n        return true;\n    }\n\n    int Front() {\n        if (isEmpty()) {\n            return -1;      // Queue is empty\n        }\n        return queue[front];\n    }\n\n    int Rear() {\n        if (isEmpty()) {\n            return -1;      // Queue is empty\n        }\n        return queue[rear];\n    }\n\n    bool isEmpty() {\n        return front == -1 && rear == -1;   // Queue is empty if both front and rear are -1\n    }\n\n    bool isFull() {\n        return (rear + 1) % size == front;   // Queue is full if (rear+1)%size is equal to front\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */\n","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue","has_notes":false,"flag_type":1}