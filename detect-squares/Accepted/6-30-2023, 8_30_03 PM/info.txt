{"id":983131347,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1688137203,"status":10,"status_display":"Accepted","runtime":"334 ms","url":"/submissions/detail/983131347/","is_pending":"Not Pending","title":"Detect Squares","memory":"93.3 MB","code":"class DetectSquares {\nprivate:\n    map<pair<int, int>, int> pointCounts;\n\npublic:\n    DetectSquares() {\n        // Constructor\n    }\n    \n    void add(vector<int> point) {\n        // Extract coordinates from the point vector\n        pair<int, int> coordinates = make_pair(point[0], point[1]);\n        // Increment the count of the coordinates in the map\n        pointCounts[coordinates]++;\n    }\n    \n    int count(vector<int> point) {\n        int squareCount = 0;\n        int x = point[0];\n        int y = point[1];\n\n        for(auto it : pointCounts) {\n            // Extract coordinates and corresponding counts from the map\n            pair<int, int> coordinates = it.first;\n            int px = coordinates.first;\n            int py = coordinates.second;\n\n            // Check if the points form a square\n            if(px != x && py != y && (abs(y - py) == abs(px - x))) {\n                int f1 = pointCounts[coordinates];\n                int f2 = pointCounts[{px, y}];\n                int f3 = pointCounts[{x, py}];\n                // Increment the square count by the product of the point counts\n                squareCount += f1 * f2 * f3;\n            }\n        }\n        return squareCount;\n    }\n};\n\n/**\n * Your DetectSquares object will be instantiated and called as such:\n * DetectSquares* obj = new DetectSquares();\n * obj->add(point);\n * int param_2 = obj->count(point);\n */\n","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"detect-squares","has_notes":false,"flag_type":1}