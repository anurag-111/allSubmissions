{"id":940672483,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1682610968,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/940672483/","is_pending":"Not Pending","title":"Bulb Switcher","memory":"5.9 MB","code":"class Solution {\npublic:\n    int bulbSwitch(int n) {\n        return sqrt(n); //O(log(n))\n    }\n};\n\n// Approach :\n    /*\n    This solution is based on a mathematical observation: a bulb will be toggled once    \n    for every divisor it has. For example, the first bulb will be toggled on rounds 1 and n, \n    so it will be on if and only if n has an odd number of divisors (since the divisors come \n    in pairs, except when n is a perfect square). \n    Therefore, the problem reduces to counting the number of perfect squares between 1 and n, \n    since those are the only bulbs that will be on at the end. This can be done by taking the \n    square root of n and rounding down to the nearest integer, which is what the function sqrt() does. \n    So the function simply returns the floor of the square root of n.\n    */\n","compare_result":"11111111111111111111111111111111111","title_slug":"bulb-switcher","has_notes":false,"flag_type":1}