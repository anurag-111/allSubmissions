{"id":872753664,"lang":"cpp","lang_name":"C++","time":"8 months, 2 weeks","timestamp":1673022909,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/872753664/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"20.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n        return balance_check(root) != -1;\n    }\n    \n    int balance_check(TreeNode* root) {\n        if (!root) {\n            return 0;\n        }\n        \n        int left_height = balance_check(root->left);\n        if (left_height == -1) {\n            return -1;\n        }\n        \n        int right_height = balance_check(root->right);\n        if (right_height == -1) {\n            return -1;\n        }\n        \n        if (abs(left_height - right_height) > 1) {\n            return -1;\n        }\n        \n        return max(left_height, right_height) + 1;\n    }\n};\n\n// TC : O(n)\n// SC : O(n)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}