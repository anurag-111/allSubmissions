{"id":1044640437,"lang":"cpp","lang_name":"C++","time":"1 week, 5 days","timestamp":1694256386,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1044640437/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    int isBST(TreeNode *root, bool &flag) {\n        // Base condition\n        if(root == NULL) {\n            return -1;\n        }\n\n        // Recursive calls\n        int leftHeight = isBST(root -> left, flag);\n        int rightHeight = isBST(root -> right, flag);\n\n        // Condition check\n        if(abs(leftHeight - rightHeight) > 1) {\n            flag = false;\n        }\n\n        // Return statement\n        return max(leftHeight, rightHeight) + 1;\n    }\npublic:\n    bool isBalanced(TreeNode *root) {\n        bool flag = true;\n        if(root == NULL) {\n            return true;\n        }\n\n        isBST(root, flag);\n        return flag;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}