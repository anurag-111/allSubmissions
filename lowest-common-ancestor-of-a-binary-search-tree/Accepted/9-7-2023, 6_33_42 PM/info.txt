{"id":1043028323,"lang":"cpp","lang_name":"C++","time":"1 week, 6 days","timestamp":1694091822,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1043028323/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.2 MB","code":"// Recursive Approach \nclass Solution {\nprivate:\n    TreeNode* calculateLCA(TreeNode *root, TreeNode *p, TreeNode *q) {\n        if(root == NULL) {\n            return NULL;\n        }\n\n        if(root -> val > p -> val && root -> val > q -> val) {\n            return calculateLCA(root -> left, p, q);\n        } \n        \n        if(root -> val < p -> val && root -> val < q -> val) {\n            return calculateLCA(root -> right, p, q);\n        }\n\n        return root;\n    }\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        return calculateLCA(root, p, q);\n    }\n};\n\n// TC : O(N)\n// SC : O(H)","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}