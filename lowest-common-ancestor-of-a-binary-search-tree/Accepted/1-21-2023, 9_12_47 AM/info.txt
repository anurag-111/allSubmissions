{"id":882160047,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1674272567,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/882160047/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"43.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null) {\n            return null;\n        }\n\n        if (root.val == p.val || root.val == q.val) {\n            return root;\n        }\n\n        TreeNode lca1 = lowestCommonAncestor (root.left, p, q);\n        TreeNode lca2 = lowestCommonAncestor (root.right, p, q);\n\n        if (lca1 != null && lca2 != null) {\n            return root;\n        }\n        if (lca1 != null) {\n            return lca1;\n        } else {\n            return lca2;\n        }\n    }\n}\n\n// 1. If it is same as p or q.\n// 2. If one of it's subtrees contain p and other contains q.\n// 3. If one of it's subtrees contain both p and q.\n// 4. If none of it's subtrees contain p and q.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}