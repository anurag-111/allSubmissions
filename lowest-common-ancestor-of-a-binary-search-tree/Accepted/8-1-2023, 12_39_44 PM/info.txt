{"id":1009156427,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1690873784,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1009156427/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        while (root) {\n            int currentValue = root->val;\n            \n            if (currentValue > p->val && currentValue > q->val) {\n                // Both p and q are in the left subtree.\n                root = root->left;\n            } else if (currentValue < p->val && currentValue < q->val) {\n                // Both p and q are in the right subtree.\n                root = root->right;\n            } else {\n                // Found the lowest common ancestor.\n                break;\n            }\n        }\n\n        return root;\n    }\n};\n\n// Time Complexity: The time complexity of the lowestCommonAncestor function is O(h), \n// where \"h\" is the height of the binary search tree. In the worst case scenario, \n// the algorithm traverses from the root to the lowest common ancestor, \n// which takes time proportional to the height of the tree.\n\n// Space Complexity: The space complexity of the lowestCommonAncestor function is O(1). \n// The algorithm uses a constant amount of extra space for the currentValue variable and \n// the loop variable root. It does not utilize any additional data structures that grow with \n// the input size or the height of the tree. Hence, the space complexity is constant.","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}