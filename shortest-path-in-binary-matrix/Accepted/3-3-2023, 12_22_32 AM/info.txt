{"id":907900970,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1677783152,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/907900970/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"43.6 MB","code":"class Solution {\n    public int shortestPathBinaryMatrix(int[][] grid) {\n        \n        int[][] dirs = {{-1, 0}, {-1, 1}, {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}};\n     \n        if (grid == null || grid.length == 0 || grid[0].length == 0) {\n            return -1;\n        }\n        \n        if (grid[0][0] == 1) {\n            return -1;\n        }\n        \n        int rows = grid.length;\n        int cols = grid[0].length;\n        \n        Queue<int[]> queue = new LinkedList<>();\n        queue.add(new int[]{0, 0, 1});\n\n        \n        while (!queue.isEmpty()) {\n            \n            int[] current = queue.remove();\n            \n            if (current[0] == rows - 1 && current[1] == cols - 1) {\n                return current[2];\n            }\n            \n            for (int[] dir : dirs) {\n                int nextRow = current[0] + dir[0];\n                int nextCol = current[1] + dir[1];\n                \n                if (nextRow >= 0 && nextRow < rows &&\n                    nextCol >= 0 && nextCol < cols &&\n                    grid[nextRow][nextCol] == 0) {\n                    grid[nextRow][nextCol] = 1;\n                    queue.add(new int[]{nextRow, nextCol, current[2] + 1});\n                }\n            }\n        }\n        \n        return -1;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false,"flag_type":1}