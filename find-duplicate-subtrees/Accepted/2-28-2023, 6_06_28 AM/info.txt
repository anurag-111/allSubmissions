{"id":906194143,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1677544588,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/906194143/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"49.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n        vector<TreeNode*> ans;\n        unordered_map<string, int> mymap;\n       \n        string helper(TreeNode* root) {\n            if(root == NULL) {\n                return \"\";\n            }\n            \n            string left = helper(root->left);\n            string right = helper(root->right);\n\n            // Create strings for the subpaths\n            string sub_path = \"(\" + left + to_string(root->val) + right + \")\"; \n            \n            // New string found, insert it and increase the frequency.\n            if(mymap[sub_path] != -1) {\n                mymap[sub_path]++;\n            } \n        \n            // Same string found then a duplicate subtree has been found.\n            if(mymap[sub_path] > 1) {\n                ans.push_back(root);\n                mymap[sub_path] = -1;       // Decrement the frequency\n            }\n            return sub_path; \n        }\n\n    public:\n        vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n            helper(root);\n            return ans;\n        }\n};\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}