{"id":903501967,"lang":"cpp","lang_name":"C++","time":"6 months, 4 weeks","timestamp":1677154147,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/903501967/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"10 MB","code":"// class Solution {\n// private:\n//     int x[4] = {-1, 0, 1, 0};\n//     int y[4] = {0, 1, 0, -1};\n\n//     void dfs(int i, int j, vector<vector<char>>& board) {\n//         board[i][j] = '#';\n\n//         for(int k = 0; k < 4; k++) {\n//             int a = i + x[k];\n//             int b = j + y[k];\n            \n//             if (a >= 0 && a < board.size() && b >= 0 && b < board[0].size() && board[a][b] == 'O') {\n//                 dfs(a, b, board);\n//             }\n//         }\n\n//     }\n\n// public:\n//     void solve(vector<vector<char>>& board) {\n//         if(board.size() == 0) {\n//             return;\n//         }\n\n//         for(int i = 0; i < board.size(); i++) {\n//             for(int j = 0; j < board[0].size(); j++) {\n//                 // Visiting all the boundary conditions\n//                 if((i == 0 || j == 0 || i == board.size() - 1 || j == board[0].size() - 1) && (board[i][j] = 'O')) {\n//                     dfs(i, j, board);\n//                     board[i][j] = '#';    \n//                 }\n//             }\n//         }\n\n//         for(int i =0; i <board.size(); i++){\n//            for(int j =0; j <board[0].size(); j++){\n//                if(board[i][j] == '#')\n//                    board[i][j] = 'O';\n//                else if(board[i][j] == 'O')\n//                    board[i][j] = 'X';\n//            }\n//         }\n//     }\n// };\n\nclass Solution {\npublic:\n    int x[4] = {-1,0,1,0};\n    int y[4] = {0,1,0,-1};\n    void dfs(int i, int j, vector<vector<char>> &board){\n        \n        board[i][j] = '*';\n        \n        for(int k = 0; k < 4; k++){\n            int a = i + x[k];\n            int b = j + y[k];\n            \n            if(a >= 0 && a < board.size() && b >= 0 && b < board[0].size() && board[a][b] == 'O'){\n                dfs(a,b,board);\n            }\n        }\n        \n    }\n    \n    void solve(vector<vector<char>>& board) {\n        //int m = board.size();\n\n        if(board.size() == 0) \n            return;\n\n        //int n = board[0].size();\n        \n        for(int i = 0; i < board.size(); i++) {\n            for(int j = 0; j < board[0].size(); j++) {\n                if((i == 0|| j == 0 || i == board.size() - 1|| j == board[0].size() - 1) and board[i][j] == 'O') {\n                    dfs(i, j, board);\n                    board[i][j] = '*';\n                }\n            }\n        }\n        \n        for(int i = 0; i < board.size(); i++){\n            for(int j = 0; j < board[0].size(); j++){\n                if(board[i][j] == '*') {\n                    board[i][j] = 'O';\n                }\n                else {\n                    board[i][j] = 'X';\n                }\n                    \n            }\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions","has_notes":false,"flag_type":1}