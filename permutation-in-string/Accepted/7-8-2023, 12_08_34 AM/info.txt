{"id":988799835,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1688755114,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/988799835/","is_pending":"Not Pending","title":"Permutation in String","memory":"7 MB","code":"class Solution\n{\n    public:\n        bool checkInclusion(const string &s1, const string &s2) {\n            if (s1.size() > s2.size()) {\n                return false;\n            }\n\n           \t// Create a vector to store the frequency count of each character\n            vector<int> countFreq(26, 0);\n\n           \t// Update the countFreq vector by subtracting the counts of characters in s2 from s1\n           \t// The countFreq vector will represent the difference in frequency counts between s1 and the sliding window in s2\n            for (int i = 0; i < s1.size(); i++) {\n                countFreq[s1[i] - 'a']++;\t// Increment count for character in s1\n                countFreq[s2[i] - 'a']--;\t// Decrement count for character in s2\n            }\n\n           \t// Check if the countFreq vector is already all zeros, indicating s1 is a permutation of the initial window in s2\n            if (allZero(countFreq)) {\n                return true;\n            }\n\n           \t// Slide the window over s2 and update the countFreq vector accordingly\n            for (int i = s1.size(); i < s2.size(); i++) {\n                countFreq[s2[i] - 'a']--;\t// Decrement count for new character in the window\n                countFreq[s2[i - s1.size()] - 'a']++;\t// Increment count for character going out of the window\n\n               \t// Check if the countFreq vector is all zeros after each window slide\n                if (allZero(countFreq)){\n                    return true;\n                }\n            }\n\n           \t// No permutation of s1 found in s2\n            return false;\n        }\n\n    private:\n       \t// Helper function to check if all counts in the countFreq vector are zero\n        bool allZero(const vector<int> &countFreq) {\n            for (int count: countFreq) {\n                if (count != 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"permutation-in-string","has_notes":false,"flag_type":1}