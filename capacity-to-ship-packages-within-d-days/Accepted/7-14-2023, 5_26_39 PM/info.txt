{"id":994265094,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1689335799,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/994265094/","is_pending":"Not Pending","title":"Capacity To Ship Packages Within D Days","memory":"31.1 MB","code":"class Solution {\nprivate:\n    // Function to check if it is possible to ship all weights within the given capacity and days\n    bool isPossible(vector<int>& weights, int capacity, int days) {\n        long long currentCapacity = 0; // Current capacity of the ship\n        int reqDays = 1; // Required number of days to ship all weights\n\n        for (int i = 0; i < weights.size(); i++) {\n            currentCapacity += weights[i]; // Add weight to the current capacity\n\n            // If the current capacity exceeds the given capacity, update the ship and increment required days\n            if (currentCapacity > capacity) {\n                reqDays++;\n                currentCapacity = weights[i];\n            }\n        }\n\n        return reqDays <= days; // Check if required days are within the given limit\n    }\n\npublic:\n    // Function to find the minimum capacity needed to ship all weights within the given number of days\n    int shipWithinDays(vector<int>& weights, int days) {\n        // Find the maximum weight and sum of weights\n        int maxWeight = 0;\n        long long sumOfWeights = 0;\n        for (int i = 0; i < weights.size(); i++) {\n            maxWeight = max(maxWeight, weights[i]);\n            sumOfWeights += weights[i];\n        }\n\n        int minCapacity = maxWeight; // Minimum capacity needed to ship all weights\n        long long maxCapacity = sumOfWeights; // Maximum capacity needed to ship all weights\n\n        // Binary search to find the minimum capacity\n        while (minCapacity <= maxCapacity) {\n            int midCapacity = minCapacity + (maxCapacity - minCapacity) / 2;\n\n            if (isPossible(weights, midCapacity, days)) {\n                maxCapacity = midCapacity - 1;\n            } else {\n                minCapacity = midCapacity + 1;\n            }\n        }\n\n        return minCapacity;\n    }\n};\n\n\n/*\n    Time Complexity: O(N * log(S))\n\n    Calculating the maximum weight and sum of weights: O(N), where N is the number of elements in the \"weights\" vector.\n    Binary search to find the minimum capacity: O(log(S)), where S is the sum of weights.\n    The isPossible function is called multiple times during the binary search: O(N).\n    Overall, the time complexity is O(N + log(S) * N), which can be simplified to O(N * log(S)).\n    \n    \n    Space Complexity: O(1)\n\n\n*/\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"capacity-to-ship-packages-within-d-days","has_notes":false,"flag_type":1}