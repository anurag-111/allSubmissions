{"id":1017323048,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1691653522,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1017323048/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"14.7 MB","code":"class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        // Case 1 : If either of the linked lists are NULL\n        if (list1 == NULL) {\n            return list2;\n        }\n\n        if(list2 == NULL) {\n            return list1;\n        }\n        \n        ListNode* dummy = new ListNode(-1);\n        ListNode* current = dummy;\n\n        ListNode* ptr1 = list1;\n        ListNode* ptr2 = list2;\n\n        // Case 2 : Traverse till there are nodes present in both the lists\n        while(ptr1 != NULL && ptr2 != NULL) {\n            if(ptr1 -> val <= ptr2 -> val) {\n                current -> next = ptr1;\n                ptr1 = ptr1 -> next;\n            } else {\n                current -> next = ptr2;\n                ptr2 = ptr2 -> next;\n            }\n            current = current -> next;\n        }\n\n        // Case 3 : Left over elements\n        if(ptr1 != NULL) {\n            current -> next = ptr1;\n        }\n\n        if(ptr2 != NULL) {\n            current -> next = ptr2;\n        }\n\n        return dummy -> next;\n    }\n};\n\n// Time Complexity: O(m + n) - where 'm' is the length of list l1 and 'n' is the length of list l2.\n// Space Complexity: O(1) - constant space usage regardless of input list sizes.","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false,"flag_type":1}