{"id":895845782,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1676110207,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/895845782/","is_pending":"Not Pending","title":"Shortest Path with Alternating Colors","memory":"15.2 MB","code":"class Solution {\npublic:\n    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {\n\n        // Adjacency list adj that contains a list of pairs of integers \n        // such that adj[node] contains the neighbors of node in the form (neighbor, color)\n        vector<vector<pair<int, int>>> adj(n);\n\n        // We use the number 0 for red and the number 1 for blue.\n        for (auto& redEdge : redEdges) {\n            adj[redEdge[0]].push_back({redEdge[1], 0});\n        }\n        for (auto& blueEdge : blueEdges) {\n            adj[blueEdge[0]].push_back(make_pair(blueEdge[1], 1));\n        }\n\n        // answer array with the value -1 where answer[i] \n        // is the answer for the i'th node\n        vector<int> answer(n, -1);\n\n        // a 2D visit array in which visit[node][color] indicates whether \n        // node has yet been visited using an edge of color.\n        vector<vector<bool>> visit(n, vector<bool>(2));\n\n        // a queue of triplets. It will save three integers per triplet: \n        // a) the current node, b) the steps taken to visit the node, and \n        // c) the color of the previous edge used.\n        queue<vector<int>> q;\n\n        // Start with node 0, with number of steps as 0 and undefined color -1.\n        q.push({0, 0, -1});\n        visit[0][1] = visit[0][0] = true;\n        answer[0] = 0;\n\n        while (!q.empty()) {\n            auto element = q.front();\n            int node = element[0], steps = element[1], prevColor = element[2];\n            q.pop();\n\n            for (auto& [neighbor, color] : adj[node]) {\n                if (!visit[neighbor][color] && color != prevColor) {\n                    visit[neighbor][color] = true;\n                    q.push({neighbor, 1 + steps, color});\n                    if (answer[neighbor] == -1) {\n                        answer[neighbor] = 1 + steps;\n                    }\n                }\n            }\n        }\n        return answer;\n    }\n};\n\n\n// Time Complexity : O(n + e)\n// Space Complexity : O(n + e)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-with-alternating-colors","has_notes":false,"flag_type":1}