{"id":1015071766,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1691441316,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1015071766/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List II","memory":"11.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if(head == NULL || head->next == NULL) {\n            return head;\n        }\n        \n        // Create a dummy node with a value of 0, to handle cases where head itself is a duplicate\n        ListNode* dummy = new ListNode(0);\n        dummy->next = head;\n\n        // Initialize two pointers: current (to traverse the list) and previous (to track the last distinct node)\n        ListNode* current = head;\n        ListNode* previous = dummy; \n\n        while (current != nullptr) {\n            // Check if the next node exists and if it has the same value as the current node\n            if (current->next != nullptr && current->val == current->next->val) {\n                // Skip all consecutive nodes with the same value as the current node\n                while (current->next != nullptr && current->val == current->next->val) {\n                    current = current->next;\n                }\n                // Update previous's next pointer to skip the duplicate nodes\n                previous->next = current->next;\n            } else {\n                // If no duplicates are found, move the previous pointer to the next distinct node\n                previous = previous->next;\n            }\n            // Move the current pointer to the next node for the next iteration\n            current = current->next;\n        }\n\n        // Return the modified list, starting from the next of the dummy node\n        return dummy->next;\n    }\n};\n\n// TC : O(N)\n// SC : O(1)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list-ii","has_notes":false,"flag_type":1}