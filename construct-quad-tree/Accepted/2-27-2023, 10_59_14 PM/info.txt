{"id":906020678,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1677518954,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/906020678/","is_pending":"Not Pending","title":"Construct Quad Tree","memory":"23 MB","code":"/*\n// Definition for a QuadTree node.\nclass Node {\npublic:\n    bool val;\n    bool isLeaf;\n    Node* topLeft;\n    Node* topRight;\n    Node* bottomLeft;\n    Node* bottomRight;\n    \n    Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\nclass Solution {\npublic:\n    Node* solve(vector<vector<int>>& grid, int x1, int y1, int length) {\n        if (length == 1) {\n            return new Node(grid[x1][y1], true);\n        }\n        \n        Node* topLeft = solve(grid, x1, y1, length / 2);\n        Node* topRight = solve(grid, x1, y1 + length / 2, length / 2);\n        Node* bottomLeft = solve(grid, x1 + length / 2, y1, length / 2);\n        Node* bottomRight = solve(grid, x1 + length / 2, y1 + length / 2, length / 2);\n            \n        \n        if (topLeft -> isLeaf && topRight -> isLeaf && bottomLeft -> isLeaf && bottomRight -> isLeaf\n           && topLeft -> val == topRight -> val && topRight -> val == bottomLeft -> val \n           && bottomLeft -> val == bottomRight -> val) {\n            return new Node(topLeft -> val, true);\n        }\n        \n        return new Node(false, false, topLeft, topRight, bottomLeft, bottomRight);\n    }\n    \n    Node* construct(vector<vector<int>>& grid) {\n        return solve(grid, 0, 0, grid.size());\n    }\n};","compare_result":"1111111111111111111111","title_slug":"construct-quad-tree","has_notes":false,"flag_type":1}