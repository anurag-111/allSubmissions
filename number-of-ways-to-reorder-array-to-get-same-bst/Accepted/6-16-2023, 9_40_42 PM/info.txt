{"id":972735448,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1686931842,"status":10,"status_display":"Accepted","runtime":"513 ms","url":"/submissions/detail/972735448/","is_pending":"Not Pending","title":"Number of Ways to Reorder Array to Get Same BST","memory":"298.4 MB","code":"class Solution {\n    vector<vector<long long>> dp;\n    long long MOD = 1e9 + 7;\n\n    unsigned long long solve(vector<int> &nums) {\n        if (nums.size() <= 1) return 1;\n        vector<int> l, r;\n        for (int i = 1; i < nums.size(); ++i) {\n            if (nums[i] > nums[0]) r.push_back(nums[i]);\n            else l.push_back(nums[i]);\n        }\n        int n = l.size(), m = r.size();\n        return solve(l) * solve(r) % MOD * dp[n + m][n] % MOD;\n    }\n\npublic:\n    int numOfWays(vector<int> &nums) {\n        dp = vector<vector<long long>>(nums.size() + 1, vector<long long>(nums.size() + 1, 0));\n        for (int i = 1; i < nums.size() + 1; ++i) {\n            dp[i][0] = 1;\n            dp[i][1] = i;\n            dp[i][i - 1] = i;\n            dp[i][i] = 1;\n        }\n        for (int i = 2; i < nums.size() + 1; ++i) {\n            for (int j = 2; j < nums.size() + 1; ++j) {\n                if (i >= j) dp[i][j] = (dp[i - 1][j - 1] % MOD + dp[i - 1][j] % MOD) % MOD;\n                else break;\n            }\n        }\n        return solve(nums) - 1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-reorder-array-to-get-same-bst","has_notes":false,"flag_type":1}