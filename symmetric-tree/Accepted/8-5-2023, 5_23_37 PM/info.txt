{"id":1012830735,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1691236417,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1012830735/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"16.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    bool helper(TreeNode* leftSubTree, TreeNode* rightSubTree) {\n        // Mirror NULL nodes\n        if(leftSubTree == NULL && rightSubTree == NULL) {\n            return true;\n        }\n        \n        // When one of the nodes is null\n        if(!leftSubTree || !rightSubTree) {\n            return false;\n        }\n        \n        // When values differ\n        if(leftSubTree->val != rightSubTree->val) {\n            return false;\n        }\n        \n        return helper(leftSubTree->left, rightSubTree->right) && helper(leftSubTree->right, rightSubTree->left);\n    }\n    \npublic:\n    bool isSymmetric(TreeNode* root) {\n        return helper(root, root);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}