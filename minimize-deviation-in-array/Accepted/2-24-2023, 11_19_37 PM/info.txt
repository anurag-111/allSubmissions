{"id":904268980,"lang":"cpp","lang_name":"C++","time":"6 months, 4 weeks","timestamp":1677260977,"status":10,"status_display":"Accepted","runtime":"555 ms","url":"/submissions/detail/904268980/","is_pending":"Not Pending","title":"Minimize Deviation in Array","memory":"56.7 MB","code":"class Solution {\npublic:\n    int minimumDeviation(vector<int>& nums) {\n        priority_queue<int> pq;\n        int minVal = INT_MAX;\n\n        for (int num : nums) {\n\n            // maximising all odd numbers by multiplication by 2\n            if (num % 2 == 1) {\n                num *= 2;\n            }\n              \n            // insertion into the priority queue\n            pq.push(num);\n\n            // storing the minimum value\n            minVal = min(minVal, num);\n        }\n\n        int minDeviation = INT_MAX;\n\n        while (true) {\n            // The top element is removed\n            int maxVal = pq.top();\n            pq.pop();\n\n            // Calculating the minimum deviation between the max and the min values\n            minDeviation = min(minDeviation, maxVal - minVal);\n\n            // If a odd number is found we break out of the loop as it had been formed \n            // by the division by 2 of even integers and that should not be undone.\n            if (maxVal % 2 == 1) {\n                break;\n            }\n\n            // Updating the value of minVal and inserting maxVal in the priority queue\n            maxVal = maxVal / 2;\n            minVal = min(minVal, maxVal);\n            pq.push(maxVal);\n        }\n        return minDeviation;\n    }\n};\n\n// Time complexity: O(nlogn)\n// Space complexity: O(n)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimize-deviation-in-array","has_notes":false,"flag_type":1}