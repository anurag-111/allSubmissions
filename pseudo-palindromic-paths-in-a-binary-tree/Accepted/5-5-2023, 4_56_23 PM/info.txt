{"id":944916157,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1683285983,"status":10,"status_display":"Accepted","runtime":"363 ms","url":"/submissions/detail/944916157/","is_pending":"Not Pending","title":"Pseudo-Palindromic Paths in a Binary Tree","memory":"192.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    int res = 0;\n    unordered_map<int, int> m;\n    \npublic:\n    void rec(TreeNode* root) {\n        if (!root)\n            return;\n        \n        m[root->val]++;\n        \n        // If we got to a leaf - check if the path can be a polindrome\n        if (!root->left && !root->right) {\n            int odd = 0;\n            for (auto a : m)\n                if (a.second % 2 == 1)\n                    odd++;\n\n            if (odd <= 1)\n                res++;\n        }\n        \n        rec(root->left);\n        rec(root->right);\n        m[root->val]--;\n    }\n    \n    int pseudoPalindromicPaths (TreeNode* root) {\n        rec(root);\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"pseudo-palindromic-paths-in-a-binary-tree","has_notes":false,"flag_type":1}