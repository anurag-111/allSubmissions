{"id":990067254,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1688897290,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/990067254/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"10.9 MB","code":"class Solution {\npublic:\n    /**\n     * Search for the target value in a rotated sorted array.\n     * \n     * @param nums The rotated sorted array.\n     * @param target The value to search for.\n     * @return The index of the target value if found, otherwise -1.\n     */\n    int search(vector<int>& nums, int target) {\n        int left = 0;                       // Leftmost index of the search range\n        int right = nums.size() - 1;        // Rightmost index of the search range\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;  // Calculate the middle index\n\n            if (nums[mid] == target) {\n                // Target found at index 'mid'\n                return mid;\n            }\n\n            if (nums[left] <= nums[mid]) {\n                // Left array is sorted\n\n                if (nums[left] <= target && target <= nums[mid]) {\n                    // Target is within the sorted range of the left array\n                    right = mid - 1;  // Adjust the right pointer\n                } else {\n                    // Target is not within the sorted range of the left array\n                    left = mid + 1;  // Adjust the left pointer\n                }\n            } else {\n                // Right array is sorted\n\n                if (nums[mid] <= target && target <= nums[right]) {\n                    // Target is within the sorted range of the right array\n                    left = mid + 1;  // Adjust the left pointer\n                } else {\n                    // Target is not within the sorted range of the right array\n                    right = mid - 1;  // Adjust the right pointer\n                }\n            }\n        }\n\n        // Target not found\n        return -1;\n    }\n};\n\n/*\nTime Complexity: O(log N)\n\nThe search is performed using binary search, which reduces \nthe search space by half in each iteration. Hence, the time \ncomplexity is logarithmic, O(log N), where N is the number \nof elements in the input array.\n    \nSpace Complexity: O(1)\n\nThe algorithm uses a constant amount of extra space for the \nvariables left, right, and mid. Therefore, the space complexity \nis O(1), indicating constant space usage regardless of the input size.\n*/\n\n\n\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}