{"id":1020848994,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1691995306,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1020848994/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"6.8 MB","code":"class MyQueue {\n    public :\n        // Stacks for performing operations\n        stack<int> input;\n        stack<int> output;\n        \n        MyQueue() {\n            \n        }\n        \n        // Push operation\n        void push(int data) {\n            input.push(data);\n        }\n        \n        // Pop operation\n        int pop() {\n            int value = peek();\n            output.pop();\n            return value;\n        }\n        \n        // Peek operation\n        int peek() {\n            if(output.empty()) {\n                while(!input.empty()) {\n                    int value = input.top();\n                    output.push(value);\n                    input.pop();\n                }\n            }\n            return output.top();\n        }\n        \n        // isEmpty operation\n        bool empty() {\n            return input.empty() && output.empty();\n        }\n};\n\n/*\nlet's calculate the total cost of n pop() operations:\n\nTotal cost = O(n) (for the first pop()) + O(1) (for the subsequent pop() operations)\n\nSince there are n pop() operations in the sequence, the total cost for the n pop() operations will be:\n\nTotal cost = n * O(1)\n\nNow, to find the amortized time complexity per pop() operation, we divide the total cost by n:\n\nAmortized time complexity = (n * O(1)) / n = O(1)\n\nSo, the amortized time complexity of the pop() method is O(1). This means that the average time taken \nfor a single pop() operation over the entire sequence of n pop() operations is constant and not dependent on the number of elements in the queue\n*/\n\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"1111111111111111111111","title_slug":"implement-queue-using-stacks","has_notes":true,"flag_type":2}