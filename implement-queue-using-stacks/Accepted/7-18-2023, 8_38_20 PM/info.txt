{"id":997663689,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689692900,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/997663689/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"6.9 MB","code":"class MyQueue {\npublic:\n    stack<int> input;\n    stack<int> output;\n    \n    MyQueue() {\n        \n    }\n    \n    void push(int x) {\n        input.push(x);\n    }\n    \n    int pop() {\n        int value = peek();\n        output.pop();\n        return value;\n    }\n    \n    int peek() {\n        if(output.empty()) {\n            while(!input.empty()) {\n                output.push(input.top());\n                input.pop();\n            }\n        }\n        return output.top();\n    }\n    \n    bool empty() {\n        return input.empty() && output.empty();\n    }\n};\n\n/*\nlet's calculate the total cost of n pop() operations:\n\nTotal cost = O(n) (for the first pop()) + O(1) (for the subsequent pop() operations)\n\nSince there are n pop() operations in the sequence, the total cost for the n pop() operations will be:\n\nTotal cost = n * O(1)\n\nNow, to find the amortized time complexity per pop() operation, we divide the total cost by n:\n\nAmortized time complexity = (n * O(1)) / n = O(1)\n\nSo, the amortized time complexity of the pop() method is O(1). This means that the average time taken \nfor a single pop() operation over the entire sequence of n pop() operations is constant and not dependent on the number of elements in the queue\n*/\n\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"1111111111111111111111","title_slug":"implement-queue-using-stacks","has_notes":false,"flag_type":1}