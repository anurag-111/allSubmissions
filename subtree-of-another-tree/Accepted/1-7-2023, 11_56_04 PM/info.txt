{"id":873516177,"lang":"cpp","lang_name":"C++","time":"8 months, 2 weeks","timestamp":1673115964,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/873516177/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"28.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    bool areIdentical(TreeNode* root, TreeNode* subRoot) {\n        //base cases\n        if (root == NULL || subRoot == NULL) {\n            return (root == subRoot);\n        }\n\n        //check if the data of both roots is same and data of left and right subtrees are also same\n        return ((root->val == subRoot->val) && \n                areIdentical(root->left, subRoot->left) && \n                areIdentical(root->right, subRoot->right));\n\n    }\n\npublic:\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        //base cases\n        if (root == NULL) {\n            return false;\n        }\n        if (subRoot == NULL) {\n            return true;\n        }\n        \n        //check the tree with root as current node\n        if (areIdentical(root, subRoot)) {\n            return true;\n        }\n        \n        //if the tree with root as current node does not match then try left and right subtrees one by one\n        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}