{"id":906679219,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1677610564,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/906679219/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"63 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        \n        if (head == null || head.next == null) {\n            return true;\n        }\n        \n        ListNode slow = head;\n        ListNode fast = head.next;\n        \n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        \n        ListNode first = head;\n        ListNode second = slow.next;\n        slow.next = null;\n        \n        second = reverseLL(second);\n        \n        while (first != null && second != null) {\n            \n            if (first.val != second.val) {\n                return false;\n            }\n            \n            first = first.next;\n            second = second.next;\n        }\n        \n        return true;\n    }\n    \n    private ListNode reverseLL(ListNode head) {\n        \n        ListNode current = head;\n        ListNode prev = null;\n        \n        while (current != null) {\n            ListNode next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n        \n        return prev;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}