{"id":933377166,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1681439253,"status":10,"status_display":"Accepted","runtime":"129 ms","url":"/submissions/detail/933377166/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"73.1 MB","code":"class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        int n = s.size();\n        if(n == 0) {\n            return 0;\n        } \n        \n        vector<vector<int>> dp(n + 1, vector<int>(n + 1));\n        for(int gaps = 0; gaps < n; gaps++) {\n           for(int i = 0, j = gaps; j < dp.size(); i++, j++) {\n                if(gaps == 0) {                                     // For cases with length 1\n                    dp[i][j] = 1;\n                } else if(gaps == 1) {                              // For cases with length 2\n                    dp[i][j] = s[i] == s[j]? 2 : 1;\n                } else {\n                    if(s[i] == s[j]) {                               // For cases with length >= 3\n                        dp[i][j] = 2 + dp[i + 1][j - 1];             // When the extremes are equal\n                    } else {\n                        dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);  // When the extremes are not equal\n                    }\n                }\n           }\n        }\n        return dp[0][n - 1];  \n    }\n    \n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-subsequence","has_notes":false,"flag_type":1}