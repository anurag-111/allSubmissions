{"id":990786102,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1688975943,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/990786102/","is_pending":"Not Pending","title":"Find Peak Element","memory":"8.6 MB","code":"class Solution {\npublic:\n    /**\n     * Find the peak element in an array.\n     *\n     * @param nums The input array.\n     * @return The index of the peak element.\n     */\n    int findPeakElement(vector<int>& nums) {\n        int n = nums.size();\n\n        // Check if the first element is a peak\n        if (n == 1 || nums[0] > nums[1]) {\n            return 0;\n        }\n\n        // Check if the last element is a peak\n        if (nums[n - 1] > nums[n - 2]) {\n            return n - 1;\n        }\n\n        int low = 1;                           // Leftmost index of the search range\n        int high = n - 2;                      // Rightmost index of the search range\n\n        while (low <= high) {\n            int mid = low + (high - low) / 2;  // Calculate the middle index\n\n            if (nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]) {\n                // Peak element found\n                return mid;\n            } else if (nums[mid] < nums[mid + 1]) {\n                // Peak is in the right part of the array\n                low = mid + 1;                 // Adjust the low pointer\n            } else {\n                // Peak is in the left part of the array\n                high = mid - 1;                // Adjust the high pointer\n            }\n        }\n\n        return -1;  // No peak element found\n    }\n};\n\n\n/*\n    Time Complexity: O(log N)\n\n    The search is performed using binary search, which reduces the search space by half in each iteration. \n    Hence, the time complexity is logarithmic, O(log N), where N is the number of elements in the input array.\n    \n    Space Complexity: O(1)\n\n    The algorithm uses a constant amount of extra space for the variables n, low, high, and mid. \n    Therefore, the space complexity is O(1), indicating constant space usage regardless of the input size.\n\n*/","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-peak-element","has_notes":false,"flag_type":1}