{"id":809385609,"lang":"cpp","lang_name":"C++","time":"11 months, 4 weeks","timestamp":1664234059,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/809385609/","is_pending":"Not Pending","title":"Remove Nth Node From End of List","memory":"10.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/*Solution - I (One-Pointer, Two-Pass)\nWe just iterate in the first-pass to find the length of the linked list - len.\nIn the next pass, iterate len - n - 1 nodes from start and delete the next node (which would be nth node from end).\n*/\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n\tListNode *fast = head, *slow = head;\n\twhile(n--) fast = fast -> next;      // iterate first n nodes using fast\n\tif(!fast) return head -> next;       // if fast is already null, it means we have to delete head itself. So, just return next of head\n\twhile(fast -> next)                  // iterate till fast reaches the last node of list\n\t\tfast = fast -> next, slow = slow -> next;            \n\tslow -> next = slow -> next -> next; // remove the nth node from last\n\treturn head;\n}\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-nth-node-from-end-of-list","has_notes":false,"flag_type":1}