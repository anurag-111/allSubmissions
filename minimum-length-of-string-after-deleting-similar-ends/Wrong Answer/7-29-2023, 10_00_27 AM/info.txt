{"id":1006606580,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1690605027,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1006606580/","is_pending":"Not Pending","title":"Minimum Length of String After Deleting Similar Ends","memory":"N/A","code":"class Solution {\npublic:\n    int minimumLength(string s) {\n        // Initialize left and right pointers to the beginning and end of the string.\n        int left = 0;\n        int right = s.size() - 1;\n        \n        // Loop until left pointer is less than right pointer.\n        while (left < right) {\n            // Move left pointer while adjacent characters are the same.\n            while (left < right && s[left] == s[left + 1]) {\n                left++;\n            }\n            \n            // Move right pointer while adjacent characters are the same.\n            while (right > left && s[right] == s[right - 1]) {\n                right--;\n            }\n            \n            // Check if characters at left and right pointers are not the same or\n            // if the left pointer has surpassed the right pointer. In either case, break the loop.\n            if (s[left] != s[right] || left >= right) {\n                break;\n            }\n            \n            // If the characters at left and right pointers are the same,\n            // move both pointers towards the center.\n            left++;\n            right--;\n        }\n        \n        // The minimum length of the remaining substring is the difference between\n        // right and left pointers plus 1 (to include the characters at both pointers).\n        return (right - left + 1);\n    }\n};\n\n\n// Time complexity: O(n)\n\n// The code iterates through the string with two pointers, left and right.\n// In the worst case, the code may need to check all characters in the string once, \n// resulting in a linear time complexity.\n    \n// Space complexity: O(1)\n\n// The code uses only a constant amount of extra space regardless of the input string's size.\n// The space required for variables (left, right, s.size(), etc.) remains constant as the input grows.\n// Hence, the space complexity is constant or O(1).","compare_result":"1000100101001010011010010000100101111001101001111001110001110110111011000111001011100111101011011100","title_slug":"minimum-length-of-string-after-deleting-similar-ends","has_notes":false,"flag_type":1}