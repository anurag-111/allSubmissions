{"id":906030272,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1677519919,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/906030272/","is_pending":"Not Pending","title":"01 Matrix","memory":"30.2 MB","code":"class Solution {\npublic:\n    vector<int> DIR = {0, 1, 0, -1, 0};\n    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n        int row = mat.size();\n        int col = mat[0].size();\n\n        queue<pair<int, int>> q;\n\n        for (int r = 0; r < row; ++r) {\n            for (int c = 0; c < col; ++c) {\n                if (mat[r][c] == 0) {\n                    q.push(make_pair(r, c));\n                } else {\n                    mat[r][c] = -1; // Not processed yet.\n                }\n            }\n        }\n                \n                \n        while (!q.empty()) {\n\n            auto [r, c] = q.front(); // making a copy of the top element. Removing that element from q doesn't affect the copy.\n            q.pop();\n\n            for (int i = 0; i < 4; ++i) {\n                int nr = r + DIR[i];\n                int nc = c + DIR[i+1];\n\n                if (nr < 0 || nr == row || nc < 0 || nc == col || mat[nr][nc] != -1) {\n                    continue;\n                }\n\n                mat[nr][nc] = mat[r][c] + 1;\n                q.emplace(nr, nc);\n            }\n        }\n        return mat;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix","has_notes":false,"flag_type":1}