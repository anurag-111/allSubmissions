{"id":974280622,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1687116791,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/974280622/","is_pending":"Not Pending","title":"Number of Increasing Paths in a Grid","memory":"70.7 MB","code":"class Solution {\n    int mod = (int)(1e9+7);\n    public int countPaths(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n        \n        int[][] dp = new int[n][m];\n        for(int[] arr: dp){\n            Arrays.fill(arr, -1);\n        }\n        int paths = 0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                paths = (paths+solve(grid, i, j, -1, dp))%mod;\n            }\n        }\n        \n        return paths;\n    }\n    \n    public int solve(int[][] grid, int i, int j, int prev, int[][] dp){\n        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]<=prev){\n            return 0;\n        }\n        \n        if(dp[i][j]!=-1){\n            return dp[i][j];\n        }\n        \n        int left = solve(grid, i, j-1, grid[i][j], dp);\n        int right = solve(grid, i, j+1, grid[i][j], dp);\n        int up = solve(grid, i-1, j, grid[i][j], dp);\n        int down = solve(grid, i+1, j, grid[i][j], dp);\n        \n        return dp[i][j] = (1+left+right+up+down)%mod;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-increasing-paths-in-a-grid","has_notes":false,"flag_type":1}