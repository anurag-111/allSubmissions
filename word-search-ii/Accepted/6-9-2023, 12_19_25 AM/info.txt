{"id":966853466,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1686250165,"status":10,"status_display":"Accepted","runtime":"2060 ms","url":"/submissions/detail/966853466/","is_pending":"Not Pending","title":"Word Search II","memory":"47.4 MB","code":"public class Solution {\n    public class TrieNode {\n        public boolean isWord = false; // Flag to indicate if the node represents a complete word\n        public TrieNode[] children = new TrieNode[26]; // Array of child nodes for each character\n\n        public TrieNode() {\n        }\n    }\n\n    TrieNode root = new TrieNode(); // Root node of the trie\n    boolean[][] visited; // 2D array to track visited cells in the board\n\n    public List<String> findWords(char[][] board, String[] words) {\n        Set<String> result = new HashSet<>(); // Set to store unique words found\n        visited = new boolean[board.length][board[0].length]; // Initialize visited array with board dimensions\n\n        addToTrie(words); // Add words to the trie\n\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (root.children[board[i][j] - 'a'] != null) {\n                    // If the current cell has a starting character in the trie, perform search\n                    search(board, i, j, root, \"\", result);\n                }\n            }\n        }\n\n        return new LinkedList<>(result); // Convert the set to a list and return\n    }\n\n    // Add words to the trie data structure\n    private void addToTrie(String[] words) {\n        for (String word : words) {\n            TrieNode node = root;\n            for (int i = 0; i < word.length(); i++) {\n                char ch = word.charAt(i);\n                if (node.children[ch - 'a'] == null) {\n                    // If the current character doesn't have a child node, create a new one\n                    node.children[ch - 'a'] = new TrieNode();\n                }\n                node = node.children[ch - 'a']; // Move to the child node\n            }\n            node.isWord = true; // Mark the last node as a valid word\n        }\n    }\n\n    // Search for words starting from a specific cell in the board\n    private void search(char[][] board, int row, int col, TrieNode node, String word, Set<String> result) {\n        // Base cases for terminating the search\n        if (row >= board.length || row < 0 || col >= board[row].length || col < 0 || visited[row][col]\n                || node.children[board[row][col] - 'a'] == null) {\n            return; // Terminate the search\n        }\n\n        visited[row][col] = true; // Mark the cell as visited\n        node = node.children[board[row][col] - 'a']; // Move to the next trie node\n        if (node.isWord) {\n            result.add(word + board[row][col]); // Add the word to the result set\n        }\n\n        // Recursive calls for exploring adjacent cells\n        search(board, row - 1, col, node, word + board[row][col], result); // Up\n        search(board, row + 1, col, node, word + board[row][col], result); // Down\n        search(board, row, col - 1, node, word + board[row][col], result); // Left\n        search(board, row, col + 1, node, word + board[row][col], result); // Right\n\n        visited[row][col] = false; // Reset the visited flag for backtracking\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"flag_type":1}