{"id":925241620,"lang":"cpp","lang_name":"C++","time":"5 months, 3 weeks","timestamp":1680246249,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/925241620/","is_pending":"Not Pending","title":"Number of Ways of Cutting a Pizza","memory":"N/A","code":"class Solution {\nprivate:\n    int dfs(int m, int n, int k, int r, int c, vector<vector<vector<int>>>& dp, vector<vector<int>>& preSum) {\n        if(preSum[r][c] == 0) {\n            return 0;\n        }\n\n        if(k == 0) {\n            return 1;\n        }\n\n        if(dp[k][r][c] != -1) {\n            return dp[k][r][c];\n        }\n\n        long long ans = 0;\n\n        // For horizontal cuts\n        for(int nr = r + 1; nr < m; nr++){\n            if(preSum[r][c] - preSum[nr][c] > 0) {\n                ans += dfs(m, n, k - 1, nr, c, dp, preSum) % 1000000007;\n            }\n        }\n\n        // For vertical cuts\n        for(int nc = c + 1; nc < n; nc++){\n            if(preSum[r][c] - preSum[r][nc] > 0) {\n                ans += dfs(m, n, k - 1, r, nc, dp, preSum) % 1000000007;\n            }\n        }\n        \n        return dp[k][r][c] = ans;\n\n\n    }   \n\n\npublic:\n    int ways(vector<string>& pizza, int k) {\n        // Initialising variables\n        int m = pizza.size();\n        int n = pizza[0].size();\n        vector<vector<vector<int>>> dp (vector(k, vector(m, vector(n, -1))));\n        vector<vector<int>> preSum(vector(m + 1, vector(n + 1, 0)));\n\n        // Prefix sum for apples from (r, c) to (m, n)\n        for(int r = m - 1; r >= 0; r--) {\n            for(int c = n - 1; c >= 0; c--) {\n                preSum[r][c] = preSum[r][c + 1] + preSum[r + 1][c] - preSum[r + 1][c + 1] + (pizza[r][c] == 'A');\n            }\n        }\n\n        return dfs(m, n, k - 1, 0, 0, dp, preSum);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111110","title_slug":"number-of-ways-of-cutting-a-pizza","has_notes":false,"flag_type":1}