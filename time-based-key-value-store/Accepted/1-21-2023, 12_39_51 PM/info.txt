{"id":882239096,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1674284991,"status":10,"status_display":"Accepted","runtime":"440 ms","url":"/submissions/detail/882239096/","is_pending":"Not Pending","title":"Time Based Key-Value Store","memory":"129.1 MB","code":"class TimeMap {\npublic:\n    unordered_map<string,vector<pair<int,string>>> umap;\n    \n    TimeMap() {\n        \n    }\n    \n    void set(string key, string value, int timestamp) {\n        umap[key].push_back({timestamp, value});\n    }\n    \n    string get(string key, int timestamp) {\n        \n        if(umap.find(key) == umap.end()) {\n          return \"\";\n        }\n\n        int low = 0;\n        int high = umap[key].size()-1;\n\n        if(umap[key][0].first > timestamp) {\n            return \"\";\n        }\n\n        string ans;\n\n        while(low <= high) {\n        int mid = low + (high - low) / 2;\n\n        if (umap[key][mid].first == timestamp) {\n            return umap[key][mid].second;\n        } else if (umap[key][mid].first < timestamp) {\n            ans = umap[key][mid].second;\n            low = mid+1;\n        } else {\n            high = mid-1;\n          }\n\n    }\n\n    return ans;\n    }\n};\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap* obj = new TimeMap();\n * obj->set(key,value,timestamp);\n * string param_2 = obj->get(key,timestamp);\n */","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"time-based-key-value-store","has_notes":false,"flag_type":1}