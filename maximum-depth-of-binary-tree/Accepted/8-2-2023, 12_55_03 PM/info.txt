{"id":1010060004,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1690961103,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1010060004/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"18.7 MB","code":"// Definition for a binary tree node \n// struct TreeNode {\n//     int val;\n//     TreeNode* left;\n//     TreeNode* right;\n//     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n// };\n\nclass Solution {\nprivate:\n    // Helper function to calculate the depth of the binary tree\n    int calculateDepth(TreeNode* root) {\n        // Base case: If the current node is NULL, return 0 (no depth)\n        if (root == NULL) {\n            return 0;\n        }\n        \n        // Recursively calculate the depths of the left and right subtrees\n        int leftDepth = calculateDepth(root->left);\n        int rightDepth = calculateDepth(root->right);\n        \n        // Return the depth of the current node by adding 1 to the maximum depth of its subtrees\n        return 1 + max(leftDepth, rightDepth);\n    }\n    \npublic:\n    // Function to return the maximum depth of the binary tree\n    int maxDepth(TreeNode* root) {\n        // Call the helper function to calculate the depth\n        return calculateDepth(root);\n    }\n};\n\n// TC : O(N)\n// SC : O(N)","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree","has_notes":false,"flag_type":1}