{"id":1007586737,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1690709127,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1007586737/","is_pending":"Not Pending","title":"Merge Sorted Array","memory":"9.2 MB","code":"class Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        int left = m + n - 1;  // Pointer to the last element of the merged array\n        int right = 0;        // Pointer to the first element of nums2\n        \n        // Merge nums1 and nums2 from the end of nums1\n        while (left > m - 1 && right < n) {\n            // Swap elements at left and right positions to put the smaller element in nums1\n            swap(nums1[left], nums2[right]);\n            left--;    // Move left pointer towards the beginning of the merged array\n            right++;   // Move right pointer towards the end of nums2\n        }\n        \n        sort(nums1.begin(), nums1.end());  // Sort the merged nums1 array\n    }   \n};\n\n// Time Complexity: O((m + n) log (m + n)) due to the sorting step.\n// Space Complexity: O(1) since no additional space is used other than the input vectors.\n// In-place merge without using any extra space.\n","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"merge-sorted-array","has_notes":false,"flag_type":1}