{"id":938031907,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1682189004,"status":10,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/938031907/","is_pending":"Not Pending","title":"Minimum Insertion Steps to Make a String Palindrome","memory":"28.4 MB","code":"class Solution {\npublic:\n    int minInsertions(string s) {\n        int n = s.length();\n        vector<vector<int>> memo(n, vector<int>(n, -1));\n        return dp(s, 0, n - 1, memo);\n    }\n    \n    int dp(string &s, int i, int j, vector<vector<int>>& memo) {\n        if (i >= j) {\n            return 0;\n        }\n        if (memo[i][j] != -1) {\n            return memo[i][j];\n        }\n        return memo[i][j] = s[i] == s[j] ? dp(s, i + 1, j - 1, memo) : 1 + min(dp(s, i + 1, j, memo), dp(s, i, j - 1, memo));\n    }\n};\n\n/*\n    The line memo[i][j] = s[i] == s[j] ? dp(s, i + 1, j - 1, memo) : 1 + min(dp(s, i + 1, j, memo), dp(s, i, j - 1, memo)); \n    has the following logic:\n\n        1. If s[i] is equal to s[j], it means the characters at indices i and j are the same, \n           so we can skip them and check the substring s[i+1] to s[j-1]. We recursively call \n           dp(s, i + 1, j - 1, memo) to compute the minimum number of insertions needed for the remaining substring.\n\n        2. If s[i] is not equal to s[j], it means the characters at indices i and j are not the same. \n    \n            In this case, we have two options:\n    \n                A. Insert a character at index i to make it equal to the character at index j, \n                   and recursively call dp(s, i + 1, j, memo) to compute the minimum number of \n                   insertions needed for the remaining substring.\n\n                B. Insert a character at index j to make it equal to the character at index i, \n                   and recursively call dp(s, i, j - 1, memo) to compute the minimum number of \n                   insertions needed for the remaining substring.\n*/\n","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-insertion-steps-to-make-a-string-palindrome","has_notes":false,"flag_type":1}