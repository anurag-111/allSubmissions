{"id":877563296,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1673631006,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/877563296/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"11.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate :\n    void view (TreeNode* root, vector<int>& result, int level) {\n        if(!root) {\n            return;\n        }\n        if(result.size() == level) {\n            result.push_back(root -> val);\n        }\n        view (root -> right, result, level + 1);\n        view (root -> left, result, level + 1);\n    }\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        vector<int> result;\n        view (root, result, 0);\n        return result;\n    }\n};\n\n// TC : O(n)\n// SC : O(h)\n// For every level, the first node (on the right side) will be our right side view.\n// If the level of the tree == vector's size, push it into the vector.\n// If we reach a null node, just return (base case).","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}