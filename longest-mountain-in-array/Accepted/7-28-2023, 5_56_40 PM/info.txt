{"id":1006123284,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1690547200,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1006123284/","is_pending":"Not Pending","title":"Longest Mountain in Array","memory":"18.3 MB","code":"class Solution {\npublic:\n    int longestMountain(vector<int>& arr) {\n        int maxLen = 0; // Initialize the maximum mountain length to 0\n        \n        // Iterate through the array, excluding the first and last elements as they can't form a mountain peak\n        for (int peak = 1; peak < arr.size() - 1; peak++) {\n            // Check if the current element is a peak (larger than its neighbors)\n            if (arr[peak] > arr[peak - 1] && arr[peak] > arr[peak + 1]) {\n                // Initialize pointers for left and right sides of the mountain\n                int left = peak - 1;\n                int right = peak + 1;\n                \n                // Move the left pointer to the left while elements are strictly increasing\n                while (left > 0 && arr[left] > arr[left - 1]) {\n                    left--;\n                }\n                \n                // Move the right pointer to the right while elements are strictly decreasing\n                while (right < arr.size() - 1 && arr[right] > arr[right + 1]) {\n                    right++;\n                }\n                \n                // Calculate the length of the mountain and update maxLen if needed\n                maxLen = max(maxLen, right - left + 1);\n            }\n        }\n        return maxLen; // Return the maximum mountain length\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-mountain-in-array","has_notes":false,"flag_type":1}