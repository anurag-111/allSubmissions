{"id":967404864,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1686318773,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/967404864/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"60.1 MB","code":"class Solution {\n    public int maxSubArray(int[] nums) {\n        int currSum = 0; // Current sum of the subarray\n        int maxSum = nums[0]; // Maximum sum found so far\n        \n        for (int num : nums) { // Iterate through the array\n            currSum += num; // Add the current number to the current sum\n            \n            if (currSum > maxSum) { // If the current sum is greater than the max sum\n                maxSum = currSum; // Update the max sum\n            }\n            \n            if (currSum < 0) { // If the current sum becomes negative\n                currSum = 0; // Reset the current sum to 0\n            }\n        }\n        \n        return maxSum; // Return the maximum sum found\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-subarray","has_notes":false,"flag_type":1}