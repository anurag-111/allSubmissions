{"id":921721955,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1679730711,"status":10,"status_display":"Accepted","runtime":"660 ms","url":"/submissions/detail/921721955/","is_pending":"Not Pending","title":"Count Unreachable Pairs of Nodes in an Undirected Graph","memory":"199 MB","code":"class Solution {\npublic:\n    void dfs(vector<int> adj[], int src, vector<bool> &vis,int &counter){\n        if(vis[src]) {\n            return;\n        }\n\n        vis[src] = true;\n        counter++;\n\n        for(auto itr : adj[src]){\n            if(!vis[itr]){\n                dfs(adj, itr, vis, counter);\n            }\n        }\n\n    }\n    long long countPairs(int n, vector<vector<int>>& edges) {\n        vector<int> adj[n];\n\n        for(auto itr : edges){\n            adj[itr[0]].push_back(itr[1]);\n            adj[itr[1]].push_back(itr[0]);\n        }\n\n        long long res = 0;\n        vector<bool> vis(n, false);\n        vector<int> temp;\n\n        for(int i = 0; i < n; i++){\n            if(!vis[i]){\n                int counter = 0;\n                dfs(adj, i, vis, counter);\n               temp.push_back(counter);\n            }\n        }\n\n        int total = 0;\n        for(int i = 0; i < temp.size(); i++){\n            res += (long)((long)temp[i] * (long)(n-total-temp[i]));\n            total += temp[i];\n        }\n\n        return res;\n    }\n};\n\n// Complexity\n\n// Time complexity:\n// DFS takes O(V+E) for a graph represented using adjacency list.\n\n// Space complexity:\n// O(V) as we are using a stack to store the vertices.\n// O(N) for making temp array","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-unreachable-pairs-of-nodes-in-an-undirected-graph","has_notes":false,"flag_type":1}