{"id":939537951,"lang":"cpp","lang_name":"C++","time":"4 months, 4 weeks","timestamp":1682432644,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/939537951/","is_pending":"Not Pending","title":"Smallest Number in Infinite Set","memory":"35.3 MB","code":"class SmallestInfiniteSet {\npublic:\n    set<int> st;\n    int min;\n\n    SmallestInfiniteSet() {\n        min = 1;\n    }\n    \n    int popSmallest() {\n        if(!st.empty()) {\n            int toRemove = *st.begin();\n            st.erase(toRemove);\n            return toRemove;\n        } else {\n            // Each time the set s is empty, min is incremented by 1, and the current value of min - 1 \n            // is returned as the smallest element. This ensures that the function always returns the smallest \n            // possible integer that is not present in the set, maintaining the integrity of the \n            // \"smallest infinite set\" concept.\n            min++;  \n            return min - 1;\n        }\n    }\n    \n    void addBack(int num) {\n        if(min > num) {\n            st.insert(num);\n        }\n    }\n};\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * SmallestInfiniteSet* obj = new SmallestInfiniteSet();\n * int param_1 = obj->popSmallest();\n * obj->addBack(num);\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-number-in-infinite-set","has_notes":false,"flag_type":1}