{"id":909613761,"lang":"cpp","lang_name":"C++","time":"6 months, 2 weeks","timestamp":1678030121,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/909613761/","is_pending":"Not Pending","title":"Redundant Connection","memory":"8.9 MB","code":"/*\n    If n nodes & n edges, guaranteed a cycle\n    How to know creating cycle? When connecting a node already connected\n    Union Find: can find this redundant edge, track parents & ranks\n\n    Time: O(n)\n    Space: O(n)\n*/\n\nclass Solution {\npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        \n        vector<int> parents;\n        vector<int> ranks;\n        for (int i = 0; i < n + 1; i++) {\n            parents.push_back(i);\n            ranks.push_back(1);\n            \n        }\n        \n        vector<int> result;\n        for (int i = 0; i < n; i++) {\n            int n1 = edges[i][0];\n            int n2 = edges[i][1];\n            if (!doUnion(parents, ranks, n1, n2)) {\n                result = {n1, n2};\n                break;\n            }\n        }\n        return result;\n    }\nprivate:\n    int doFind(vector<int>& parents, int n) {\n        int p = parents[n];\n        while (p != parents[p]) {\n            parents[p] = parents[parents[p]];\n            p = parents[p];\n        }\n        return p;\n    }\n    \n    bool doUnion(vector<int>& parents, vector<int>& ranks, int n1, int n2) {\n        int p1 = doFind(parents, n1);\n        int p2 = doFind(parents, n2);\n        if (p1 == p2) {\n            return false;\n        }\n        \n        if (ranks[p1] > ranks[p2]) {\n            parents[p2] = p1;\n            ranks[p1] += ranks[p2];\n        } else {\n            parents[p1] = p2;\n            ranks[p2] += ranks[p1];\n        }\n        \n        return true;\n    }\n};\n\n\n/*\n    If n nodes & n edges, guaranteed a cycle\n    How to know creating cycle? When connecting a node already connected\n    Union Find: can find this redundant edge, track parents & ranks\n\n    Time: O(n)\n    Space: O(n)\n*/\n","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false,"flag_type":1}