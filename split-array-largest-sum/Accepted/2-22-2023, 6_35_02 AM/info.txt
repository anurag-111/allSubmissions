{"id":902604915,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1677027902,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/902604915/","is_pending":"Not Pending","title":"Split Array Largest Sum","memory":"7.4 MB","code":"class Solution {\nprivate: \n    bool isPossible(vector<int>& nums, int n, int mid) {\n        int require_arr = 1;\n        int sum = 0;\n\n        // checks if the condition of splitting nums into k non-empty \n        // subarrays such that the largest sum of any subarray is minimized is satisfied.\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n\n            if(sum > mid){\n                require_arr++;\n                sum = nums[i];\n            }\n        }\n        return require_arr <= n;\n    }\n    \npublic:\n    int splitArray(vector<int>& nums, int k) {\n        int max_arr = 0;\n        int sum = 0;\n\n        // calculating the maximum element and the sum of the array.\n        for(int val : nums) {\n            sum += val;\n            max_arr = max(max_arr, val);\n        }\n\n        // if the number of distribution is eqaul to the size of array \n        // just return the maximum of the array\n        if(nums.size() == k) { \n            return max_arr;\n        }\n\n        // low will be set to the maximum element.\n        int low = max_arr; \n\n        // high will be set to the sum of the given array\n        int high = sum;\n\n        int answer = 0;\n\n        // binary search applied on the values present in the array\n        while(low <= high) {\n            int mid = low + (high - low) / 2;   //overflow prevented.\n\n            if(isPossible(nums, k, mid)) {\n                answer = mid;\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return answer;\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"split-array-largest-sum","has_notes":false,"flag_type":1}