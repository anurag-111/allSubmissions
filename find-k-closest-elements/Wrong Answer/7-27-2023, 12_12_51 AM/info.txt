{"id":1004734333,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1690396971,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1004734333/","is_pending":"Not Pending","title":"Find K Closest Elements","memory":"N/A","code":"// Two pointer appraoch :\n\nclass Solution {\npublic:\n    vector<int> findClosestElements(vector<int>& arr, int k, int x) {\n        // First find the element or it's nearest one by binary search\n        int low = 0;\n        int mid = 0;\n        int high = arr.size() - 1;\n        \n        while(low <= high) {\n            mid = low + (high - low) / 2;\n            if(arr[mid] == x) {\n                break;\n            } else if(arr[mid] < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        \n        int left = mid - 1;\n        int right = mid;\n        vector<int> closest;\n        \n        // Start the search in both left and right side search space of our array\n        while(left >= 0 && right < arr.size() && k > 0) {\n            if(abs(arr[left] - x) > abs(arr[right] - x)) {\n                closest.push_back(arr[left]);\n                left--;\n            } else {\n                closest.push_back(arr[right]);\n                right++;\n            }\n            k--;\n        }\n        \n        while(left >= 0 && k > 0) {\n            closest.push_back(arr[left]);\n            left--;\n            k--;\n        }\n        \n        while(right < arr.size() && k > 0) {\n            closest.push_back(arr[right]);\n            right++;\n            k--;\n        }\n        \n        sort(closest.begin(), closest.end());\n        return closest;\n    }\n};","compare_result":"1111101010000000100000101001000000000110000101010010000010000001100","title_slug":"find-k-closest-elements","has_notes":false,"flag_type":1}