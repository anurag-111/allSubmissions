{"id":1006192838,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1690553926,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1006192838/","is_pending":"Not Pending","title":"Find K Closest Elements","memory":"31.8 MB","code":"// Optimized approach for finding 'k' closest elements to 'x' in a sorted array 'arr'.\n\nclass Solution {\npublic:\n    vector<int> findClosestElements(std::vector<int>& arr, int k, int x) {\n        int left = 0;\n        int right = arr.size() - k;\n        \n        // Perform binary search to find the starting index of the 'k' closest elements.\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            \n            // If the difference between x and the mid element is greater than the difference\n            // between the (mid + k)th element and x, move the left pointer to mid + 1.\n            if (x - arr[mid] > arr[mid + k] - x) {\n                left = mid + 1;\n            } else {\n                // Otherwise, move the right pointer to mid.\n                right = mid;\n            }\n        }\n        \n        // Create the result vector containing the 'k' closest elements.\n        vector<int> result;\n        for (int i = 0; i < k; i++) {\n            result.push_back(arr[left + i]);\n        }\n        \n        return result;\n    }\n};\n\n// Time complexity: O(log(N - k)) - Due to the binary search where 'N' is the size of the \n// input array 'arr' and 'k' is the number of closest elements to find.\n\n// Space complexity: O(k) - Due to the result vector that contains the 'k' \n// closest elements. The space used by other variables is constant (O(1)).","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-k-closest-elements","has_notes":false,"flag_type":1}