{"id":1017352413,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1691656426,"status":10,"status_display":"Accepted","runtime":"181 ms","url":"/submissions/detail/1017352413/","is_pending":"Not Pending","title":"Sort List","memory":"74 MB","code":"class Solution {\nprivate:\n    ListNode* findMid(ListNode* head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n\n        while(fast->next && fast->next->next) {\n            slow = slow -> next;\n            fast = fast -> next -> next;\n        }\n        return slow;\n    }\n\n    ListNode* mergeLists(ListNode* left, ListNode* right) {\n        if(left == NULL) {\n            return right;\n        }\n\n        if(right == NULL) {\n            return left;\n        }\n\n        ListNode* dummy = new ListNode(0);\n        ListNode* current = dummy;\n        \n        while(left && right) {\n            if(left->val < right->val) {\n                current -> next = left;\n                left = left -> next;\n            } else {\n                current -> next = right;\n                right = right -> next; \n            }\n            current = current -> next;\n        }\n\n        if(left != NULL) {\n            current -> next = left;\n        }\n\n        if(right != NULL) {\n            current -> next = right;\n        }\n\n        return dummy -> next;\n    }\n\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(head == NULL || head -> next == NULL) {\n            return head;\n        }\n        \n        ListNode* mid = findMid(head);\n        ListNode* newHead = mid -> next;\n\n        mid -> next = NULL;\n\n        ListNode* leftHalf = sortList(head);\n        ListNode* rightHalf = sortList(newHead);\n\n        return mergeLists(leftHalf, rightHalf);\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1}